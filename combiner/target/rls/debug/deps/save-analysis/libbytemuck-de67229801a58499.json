{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.1","compilation":{"directory":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0","program":"/home/junior/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/bin/rls","arguments":["--crate-name","bytemuck","--edition=2018","/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/lib.rs","--json=diagnostic-rendered-ansi,future-incompat","--crate-type","lib","--emit=dep-info,metadata","-C","embed-bitcode=no","-C","debuginfo=2","--cfg","feature=\"extern_crate_alloc\"","-C","metadata=de67229801a58499","-C","extra-filename=-de67229801a58499","--out-dir","/home/junior/Code Projects/Rust-Lang/Curso_basico_de_RustLang/combiner/target/rls/debug/deps","-L","dependency=/home/junior/Code Projects/Rust-Lang/Curso_basico_de_RustLang/combiner/target/rls/debug/deps","--cap-lints","allow","--error-format=json","--sysroot","/home/junior/.rustup/toolchains/stable-x86_64-unknown-linux-gnu"],"output":"/home/junior/Code Projects/Rust-Lang/Curso_basico_de_RustLang/combiner/target/rls/debug/deps/libbytemuck-de67229801a58499.rmeta"},"prelude":{"crate_id":{"name":"bytemuck","disambiguator":[7427274126682475525,0]},"crate_root":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src","external_crates":[{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/lib.rs","num":1,"id":{"name":"core","disambiguator":[5443730852259234579,0]}},{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/lib.rs","num":2,"id":{"name":"compiler_builtins","disambiguator":[4162025702538114948,0]}},{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/lib.rs","num":3,"id":{"name":"rustc_std_workspace_core","disambiguator":[17612152343462746361,0]}},{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/lib.rs","num":4,"id":{"name":"alloc","disambiguator":[5560808256873132085,0]}}],"span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/lib.rs","byte_start":0,"byte_end":15738,"line_start":1,"line_end":498,"column_start":1,"column_end":2}},"imports":[{"kind":"Use","ref_id":{"krate":1,"index":0},"span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/lib.rs","byte_start":2137,"byte_end":2141,"line_start":56,"line_end":56,"column_start":11,"column_end":15},"alias_span":null,"name":"__core","value":"","parent":{"krate":0,"index":0}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/lib.rs","byte_start":2774,"byte_end":2775,"line_start":81,"line_end":81,"column_start":21,"column_end":22},"alias_span":null,"name":"*","value":"","parent":{"krate":0,"index":0}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/lib.rs","byte_start":2810,"byte_end":2811,"line_start":84,"line_end":84,"column_start":19,"column_end":20},"alias_span":null,"name":"*","value":"Zeroable","parent":{"krate":0,"index":0}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/lib.rs","byte_start":2836,"byte_end":2837,"line_start":87,"line_end":87,"column_start":14,"column_end":15},"alias_span":null,"name":"*","value":"Pod","parent":{"krate":0,"index":0}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/lib.rs","byte_start":2876,"byte_end":2877,"line_start":90,"line_end":90,"column_start":21,"column_end":22},"alias_span":null,"name":"*","value":"","parent":{"krate":0,"index":0}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/lib.rs","byte_start":2914,"byte_end":2915,"line_start":93,"line_end":93,"column_start":20,"column_end":21},"alias_span":null,"name":"*","value":"","parent":{"krate":0,"index":0}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/lib.rs","byte_start":2956,"byte_end":2957,"line_start":96,"line_end":96,"column_start":22,"column_end":23},"alias_span":null,"name":"*","value":"","parent":{"krate":0,"index":0}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/lib.rs","byte_start":0,"byte_end":15738,"line_start":1,"line_end":498,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":7},{"krate":0,"index":8},{"krate":0,"index":9},{"krate":0,"index":10},{"krate":0,"index":11},{"krate":0,"index":12},{"krate":0,"index":15},{"krate":0,"index":16},{"krate":0,"index":17},{"krate":0,"index":18},{"krate":0,"index":69},{"krate":0,"index":70},{"krate":0,"index":166},{"krate":0,"index":167},{"krate":0,"index":210},{"krate":0,"index":211},{"krate":0,"index":220},{"krate":0,"index":221},{"krate":0,"index":223},{"krate":0,"index":224},{"krate":0,"index":240},{"krate":0,"index":241},{"krate":0,"index":242},{"krate":0,"index":244},{"krate":0,"index":246},{"krate":0,"index":248},{"krate":0,"index":250},{"krate":0,"index":252},{"krate":0,"index":254},{"krate":0,"index":256},{"krate":0,"index":626},{"krate":0,"index":635},{"krate":0,"index":637},{"krate":0,"index":639},{"krate":0,"index":640},{"krate":0,"index":641},{"krate":0,"index":643},{"krate":0,"index":644},{"krate":0,"index":646},{"krate":0,"index":258},{"krate":0,"index":260},{"krate":0,"index":263},{"krate":0,"index":266},{"krate":0,"index":269},{"krate":0,"index":272},{"krate":0,"index":275},{"krate":0,"index":278},{"krate":0,"index":281},{"krate":0,"index":284},{"krate":0,"index":287},{"krate":0,"index":290},{"krate":0,"index":293}],"decl_id":null,"docs":" This crate gives small utilities for casting between plain data types.","sig":null,"attributes":[{"value":"no_std","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/lib.rs","byte_start":0,"byte_end":10,"line_start":1,"line_end":1,"column_start":1,"column_end":11}},{"value":"warn(missing_docs)","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/lib.rs","byte_start":11,"byte_end":33,"line_start":2,"line_end":2,"column_start":1,"column_end":23}},{"value":"/ This crate gives small utilities for casting between plain data types.","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/lib.rs","byte_start":107,"byte_end":181,"line_start":5,"line_end":5,"column_start":1,"column_end":75}},{"value":"/","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/lib.rs","byte_start":182,"byte_end":185,"line_start":6,"line_end":6,"column_start":1,"column_end":4}},{"value":"/ ## Basics","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/lib.rs","byte_start":186,"byte_end":199,"line_start":7,"line_end":7,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/lib.rs","byte_start":200,"byte_end":203,"line_start":8,"line_end":8,"column_start":1,"column_end":4}},{"value":"/ Data comes in five basic forms in Rust, so we have five basic casting","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/lib.rs","byte_start":204,"byte_end":277,"line_start":9,"line_end":9,"column_start":1,"column_end":74}},{"value":"/ functions:","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/lib.rs","byte_start":278,"byte_end":292,"line_start":10,"line_end":10,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/lib.rs","byte_start":293,"byte_end":296,"line_start":11,"line_end":11,"column_start":1,"column_end":4}},{"value":"/ * `T` uses [`cast`]","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/lib.rs","byte_start":297,"byte_end":320,"line_start":12,"line_end":12,"column_start":1,"column_end":24}},{"value":"/ * `&T` uses [`cast_ref`]","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/lib.rs","byte_start":321,"byte_end":349,"line_start":13,"line_end":13,"column_start":1,"column_end":29}},{"value":"/ * `&mut T` uses [`cast_mut`]","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/lib.rs","byte_start":350,"byte_end":382,"line_start":14,"line_end":14,"column_start":1,"column_end":33}},{"value":"/ * `&[T]` uses [`cast_slice`]","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/lib.rs","byte_start":383,"byte_end":415,"line_start":15,"line_end":15,"column_start":1,"column_end":33}},{"value":"/ * `&mut [T]` uses [`cast_slice_mut`]","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/lib.rs","byte_start":416,"byte_end":456,"line_start":16,"line_end":16,"column_start":1,"column_end":41}},{"value":"/","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/lib.rs","byte_start":457,"byte_end":460,"line_start":17,"line_end":17,"column_start":1,"column_end":4}},{"value":"/ Some casts will never fail (eg: `cast::<u32, f32>` always works), other","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/lib.rs","byte_start":461,"byte_end":536,"line_start":18,"line_end":18,"column_start":1,"column_end":76}},{"value":"/ casts might fail (eg: `cast_ref::<[u8; 4], u32>` will fail if the reference","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/lib.rs","byte_start":537,"byte_end":616,"line_start":19,"line_end":19,"column_start":1,"column_end":80}},{"value":"/ isn't already aligned to 4). Each casting function has a \"try\" version which","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/lib.rs","byte_start":617,"byte_end":697,"line_start":20,"line_end":20,"column_start":1,"column_end":81}},{"value":"/ will return a `Result`, and the \"normal\" version which will simply panic on","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/lib.rs","byte_start":698,"byte_end":777,"line_start":21,"line_end":21,"column_start":1,"column_end":80}},{"value":"/ invalid input.","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/lib.rs","byte_start":778,"byte_end":796,"line_start":22,"line_end":22,"column_start":1,"column_end":19}},{"value":"/","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/lib.rs","byte_start":797,"byte_end":800,"line_start":23,"line_end":23,"column_start":1,"column_end":4}},{"value":"/ ## Using Your Own Types","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/lib.rs","byte_start":801,"byte_end":828,"line_start":24,"line_end":24,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/lib.rs","byte_start":829,"byte_end":832,"line_start":25,"line_end":25,"column_start":1,"column_end":4}},{"value":"/ All the functions here are guarded by the [`Pod`] trait, which is a","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/lib.rs","byte_start":833,"byte_end":904,"line_start":26,"line_end":26,"column_start":1,"column_end":72}},{"value":"/ sub-trait of the [`Zeroable`] trait.","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/lib.rs","byte_start":905,"byte_end":945,"line_start":27,"line_end":27,"column_start":1,"column_end":41}},{"value":"/","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/lib.rs","byte_start":946,"byte_end":949,"line_start":28,"line_end":28,"column_start":1,"column_end":4}},{"value":"/ If you're very sure that your type is eligible, you can implement those","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/lib.rs","byte_start":950,"byte_end":1025,"line_start":29,"line_end":29,"column_start":1,"column_end":76}},{"value":"/ traits for your type and then they'll have full casting support. However,","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/lib.rs","byte_start":1026,"byte_end":1103,"line_start":30,"line_end":30,"column_start":1,"column_end":78}},{"value":"/ these traits are `unsafe`, and you should carefully read the requirements","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/lib.rs","byte_start":1104,"byte_end":1181,"line_start":31,"line_end":31,"column_start":1,"column_end":78}},{"value":"/ before adding the them to your own types.","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/lib.rs","byte_start":1182,"byte_end":1227,"line_start":32,"line_end":32,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/lib.rs","byte_start":1228,"byte_end":1231,"line_start":33,"line_end":33,"column_start":1,"column_end":4}},{"value":"/ ## Features","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/lib.rs","byte_start":1232,"byte_end":1247,"line_start":34,"line_end":34,"column_start":1,"column_end":16}},{"value":"/","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/lib.rs","byte_start":1248,"byte_end":1251,"line_start":35,"line_end":35,"column_start":1,"column_end":4}},{"value":"/ * This crate is core only by default, but if you're using Rust 1.36 or later","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/lib.rs","byte_start":1252,"byte_end":1332,"line_start":36,"line_end":36,"column_start":1,"column_end":81}},{"value":"/   you can enable the `extern_crate_alloc` cargo feature for some additional","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/lib.rs","byte_start":1333,"byte_end":1412,"line_start":37,"line_end":37,"column_start":1,"column_end":80}},{"value":"/   methods related to `Box` and `Vec`. Note that the `docs.rs` documentation","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/lib.rs","byte_start":1413,"byte_end":1492,"line_start":38,"line_end":38,"column_start":1,"column_end":80}},{"value":"/   is always built with `extern_crate_alloc` cargo feature enabled.","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/lib.rs","byte_start":1493,"byte_end":1563,"line_start":39,"line_end":39,"column_start":1,"column_end":71}}]},{"kind":"Mod","id":{"krate":0,"index":18},"span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/allocation.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"allocation","qualname":"::allocation","value":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/allocation.rs","parent":null,"children":[{"krate":0,"index":19},{"krate":0,"index":20},{"krate":0,"index":21},{"krate":0,"index":22},{"krate":0,"index":25},{"krate":0,"index":28},{"krate":0,"index":31},{"krate":0,"index":32},{"krate":0,"index":34},{"krate":0,"index":37},{"krate":0,"index":40},{"krate":0,"index":44},{"krate":0,"index":47},{"krate":0,"index":51},{"krate":0,"index":53},{"krate":0,"index":57},{"krate":0,"index":59},{"krate":0,"index":63},{"krate":0,"index":66}],"decl_id":null,"docs":" Stuff to boost things in the `alloc` crate.","sig":null,"attributes":[{"value":"cfg(feature = \"extern_crate_alloc\")","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/lib.rs","byte_start":2656,"byte_end":2694,"line_start":78,"line_end":78,"column_start":1,"column_end":39}},{"value":"cfg(feature = \"extern_crate_alloc\")","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/allocation.rs","byte_start":16238,"byte_end":16277,"line_start":1,"line_end":1,"column_start":1,"column_end":40}},{"value":"/ Stuff to boost things in the `alloc` crate.","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/allocation.rs","byte_start":16279,"byte_end":16326,"line_start":3,"line_end":3,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/allocation.rs","byte_start":16327,"byte_end":16330,"line_start":4,"line_end":4,"column_start":1,"column_end":4}},{"value":"/ * You must enable the `extern_crate_alloc` feature of `bytemuck` or you will","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/allocation.rs","byte_start":16331,"byte_end":16411,"line_start":5,"line_end":5,"column_start":1,"column_end":81}},{"value":"/   not be able to use this module! This is generally done by adding the","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/allocation.rs","byte_start":16412,"byte_end":16486,"line_start":6,"line_end":6,"column_start":1,"column_end":75}},{"value":"/   feature to the dependency in Cargo.toml like so: ","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/allocation.rs","byte_start":16487,"byte_end":16542,"line_start":7,"line_end":7,"column_start":1,"column_end":56}},{"value":"/   `bytemuck = { version = \"VERSION_YOU_ARE_USING\", features = [\"extern_crate_alloc\"]}`","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/allocation.rs","byte_start":16543,"byte_end":16633,"line_start":8,"line_end":8,"column_start":1,"column_end":91}}]},{"kind":"Function","id":{"krate":0,"index":40},"span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/allocation.rs","byte_start":16838,"byte_end":16846,"line_start":22,"line_end":22,"column_start":8,"column_end":16},"name":"cast_box","qualname":"::allocation::cast_box","value":"pub fn cast_box<A: Pod, B: Pod>(Box<A>) -> Box<B>","parent":null,"children":[],"decl_id":null,"docs":" As [`try_cast_box`](try_cast_box), but unwraps for you.\n","sig":null,"attributes":[{"value":"/ As [`try_cast_box`](try_cast_box), but unwraps for you.","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/allocation.rs","byte_start":16761,"byte_end":16820,"line_start":20,"line_end":20,"column_start":1,"column_end":60}},{"value":"inline","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/allocation.rs","byte_start":16821,"byte_end":16830,"line_start":21,"line_end":21,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":44},"span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/allocation.rs","byte_start":17293,"byte_end":17305,"line_start":36,"line_end":36,"column_start":8,"column_end":20},"name":"try_cast_box","qualname":"::allocation::try_cast_box","value":"pub fn try_cast_box<A: Pod, B: Pod>(Box<A>)\n-> Result<Box<B>, (PodCastError, Box<A>)>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to cast the content type of a [`Box`](alloc::boxed::Box).","sig":null,"attributes":[{"value":"/ Attempts to cast the content type of a [`Box`](alloc::boxed::Box).","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/allocation.rs","byte_start":16945,"byte_end":17015,"line_start":26,"line_end":26,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/allocation.rs","byte_start":17016,"byte_end":17019,"line_start":27,"line_end":27,"column_start":1,"column_end":4}},{"value":"/ On failure you get back an error along with the starting `Box`.","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/allocation.rs","byte_start":17020,"byte_end":17087,"line_start":28,"line_end":28,"column_start":1,"column_end":68}},{"value":"/","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/allocation.rs","byte_start":17088,"byte_end":17091,"line_start":29,"line_end":29,"column_start":1,"column_end":4}},{"value":"/ ## Failure","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/allocation.rs","byte_start":17092,"byte_end":17106,"line_start":30,"line_end":30,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/allocation.rs","byte_start":17107,"byte_end":17110,"line_start":31,"line_end":31,"column_start":1,"column_end":4}},{"value":"/ * The start and end content type of the `Box` must have the exact same","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/allocation.rs","byte_start":17111,"byte_end":17185,"line_start":32,"line_end":32,"column_start":1,"column_end":75}},{"value":"/   alignment.","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/allocation.rs","byte_start":17186,"byte_end":17202,"line_start":33,"line_end":33,"column_start":1,"column_end":17}},{"value":"/ * The start and end size of the `Box` must have the exact same size.","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/allocation.rs","byte_start":17203,"byte_end":17275,"line_start":34,"line_end":34,"column_start":1,"column_end":73}},{"value":"inline","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/allocation.rs","byte_start":17276,"byte_end":17285,"line_start":35,"line_end":35,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":47},"span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/allocation.rs","byte_start":18171,"byte_end":18185,"line_start":61,"line_end":61,"column_start":8,"column_end":22},"name":"try_zeroed_box","qualname":"::allocation::try_zeroed_box","value":"pub fn try_zeroed_box<T: Zeroable>() -> Result<Box<T>, ()>","parent":null,"children":[],"decl_id":null,"docs":" Allocates a `Box<T>` with all of the contents being zeroed out.","sig":null,"attributes":[{"value":"/ Allocates a `Box<T>` with all of the contents being zeroed out.","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/allocation.rs","byte_start":17751,"byte_end":17818,"line_start":50,"line_end":50,"column_start":1,"column_end":68}},{"value":"/","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/allocation.rs","byte_start":17819,"byte_end":17822,"line_start":51,"line_end":51,"column_start":1,"column_end":4}},{"value":"/ This uses the global allocator to create a zeroed allocation and _then_","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/allocation.rs","byte_start":17823,"byte_end":17898,"line_start":52,"line_end":52,"column_start":1,"column_end":76}},{"value":"/ turns it into a Box. In other words, it's 100% assured that the zeroed data","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/allocation.rs","byte_start":17899,"byte_end":17978,"line_start":53,"line_end":53,"column_start":1,"column_end":80}},{"value":"/ won't be put temporarily on the stack. You can make a box of any size","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/allocation.rs","byte_start":17979,"byte_end":18052,"line_start":54,"line_end":54,"column_start":1,"column_end":74}},{"value":"/ without fear of a stack overflow.","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/allocation.rs","byte_start":18053,"byte_end":18090,"line_start":55,"line_end":55,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/allocation.rs","byte_start":18091,"byte_end":18094,"line_start":56,"line_end":56,"column_start":1,"column_end":4}},{"value":"/ ## Failure","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/allocation.rs","byte_start":18095,"byte_end":18109,"line_start":57,"line_end":57,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/allocation.rs","byte_start":18110,"byte_end":18113,"line_start":58,"line_end":58,"column_start":1,"column_end":4}},{"value":"/ This fails if the allocation fails.","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/allocation.rs","byte_start":18114,"byte_end":18153,"line_start":59,"line_end":59,"column_start":1,"column_end":40}},{"value":"inline","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/allocation.rs","byte_start":18154,"byte_end":18163,"line_start":60,"line_end":60,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":51},"span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/allocation.rs","byte_start":19310,"byte_end":19320,"line_start":91,"line_end":91,"column_start":8,"column_end":18},"name":"zeroed_box","qualname":"::allocation::zeroed_box","value":"pub fn zeroed_box<T: Zeroable>() -> Box<T>","parent":null,"children":[],"decl_id":null,"docs":" As [`try_zeroed_box`], but unwraps for you.\n","sig":null,"attributes":[{"value":"/ As [`try_zeroed_box`], but unwraps for you.","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/allocation.rs","byte_start":19245,"byte_end":19292,"line_start":89,"line_end":89,"column_start":1,"column_end":48}},{"value":"inline","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/allocation.rs","byte_start":19293,"byte_end":19302,"line_start":90,"line_end":90,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":53},"span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/allocation.rs","byte_start":19794,"byte_end":19814,"line_start":106,"line_end":106,"column_start":8,"column_end":28},"name":"try_zeroed_slice_box","qualname":"::allocation::try_zeroed_slice_box","value":"pub fn try_zeroed_slice_box<T: Zeroable>(usize) -> Result<Box<[T]>, ()>","parent":null,"children":[],"decl_id":null,"docs":" Allocates a `Box<[T]>` with all contents being zeroed out.","sig":null,"attributes":[{"value":"/ Allocates a `Box<[T]>` with all contents being zeroed out.","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/allocation.rs","byte_start":19379,"byte_end":19441,"line_start":95,"line_end":95,"column_start":1,"column_end":63}},{"value":"/","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/allocation.rs","byte_start":19442,"byte_end":19445,"line_start":96,"line_end":96,"column_start":1,"column_end":4}},{"value":"/ This uses the global allocator to create a zeroed allocation and _then_","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/allocation.rs","byte_start":19446,"byte_end":19521,"line_start":97,"line_end":97,"column_start":1,"column_end":76}},{"value":"/ turns it into a Box. In other words, it's 100% assured that the zeroed data","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/allocation.rs","byte_start":19522,"byte_end":19601,"line_start":98,"line_end":98,"column_start":1,"column_end":80}},{"value":"/ won't be put temporarily on the stack. You can make a box of any size","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/allocation.rs","byte_start":19602,"byte_end":19675,"line_start":99,"line_end":99,"column_start":1,"column_end":74}},{"value":"/ without fear of a stack overflow.","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/allocation.rs","byte_start":19676,"byte_end":19713,"line_start":100,"line_end":100,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/allocation.rs","byte_start":19714,"byte_end":19717,"line_start":101,"line_end":101,"column_start":1,"column_end":4}},{"value":"/ ## Failure","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/allocation.rs","byte_start":19718,"byte_end":19732,"line_start":102,"line_end":102,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/allocation.rs","byte_start":19733,"byte_end":19736,"line_start":103,"line_end":103,"column_start":1,"column_end":4}},{"value":"/ This fails if the allocation fails.","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/allocation.rs","byte_start":19737,"byte_end":19776,"line_start":104,"line_end":104,"column_start":1,"column_end":40}},{"value":"inline","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/allocation.rs","byte_start":19777,"byte_end":19786,"line_start":105,"line_end":105,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":57},"span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/allocation.rs","byte_start":20890,"byte_end":20906,"line_start":137,"line_end":137,"column_start":8,"column_end":24},"name":"zeroed_slice_box","qualname":"::allocation::zeroed_slice_box","value":"pub fn zeroed_slice_box<T: Zeroable>(usize) -> Box<[T]>","parent":null,"children":[],"decl_id":null,"docs":" As [`try_zeroed_slice_box`](try_zeroed_slice_box), but unwraps for you.\n","sig":null,"attributes":[{"value":"/ As [`try_zeroed_slice_box`](try_zeroed_slice_box), but unwraps for you.","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/allocation.rs","byte_start":20807,"byte_end":20882,"line_start":136,"line_end":136,"column_start":1,"column_end":76}}]},{"kind":"Function","id":{"krate":0,"index":59},"span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/allocation.rs","byte_start":21069,"byte_end":21077,"line_start":143,"line_end":143,"column_start":8,"column_end":16},"name":"cast_vec","qualname":"::allocation::cast_vec","value":"pub fn cast_vec<A: Pod, B: Pod>(Vec<A>) -> Vec<B>","parent":null,"children":[],"decl_id":null,"docs":" As [`try_cast_vec`](try_cast_vec), but unwraps for you.\n","sig":null,"attributes":[{"value":"/ As [`try_cast_vec`](try_cast_vec), but unwraps for you.","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/allocation.rs","byte_start":20992,"byte_end":21051,"line_start":141,"line_end":141,"column_start":1,"column_end":60}},{"value":"inline","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/allocation.rs","byte_start":21052,"byte_end":21061,"line_start":142,"line_end":142,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":63},"span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/allocation.rs","byte_start":21692,"byte_end":21704,"line_start":160,"line_end":160,"column_start":8,"column_end":20},"name":"try_cast_vec","qualname":"::allocation::try_cast_vec","value":"pub fn try_cast_vec<A: Pod, B: Pod>(Vec<A>)\n-> Result<Vec<B>, (PodCastError, Vec<A>)>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to cast the content type of a [`Vec`](alloc::vec::Vec).","sig":null,"attributes":[{"value":"/ Attempts to cast the content type of a [`Vec`](alloc::vec::Vec).","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/allocation.rs","byte_start":21176,"byte_end":21244,"line_start":147,"line_end":147,"column_start":1,"column_end":69}},{"value":"/","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/allocation.rs","byte_start":21245,"byte_end":21248,"line_start":148,"line_end":148,"column_start":1,"column_end":4}},{"value":"/ On failure you get back an error along with the starting `Vec`.","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/allocation.rs","byte_start":21249,"byte_end":21316,"line_start":149,"line_end":149,"column_start":1,"column_end":68}},{"value":"/","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/allocation.rs","byte_start":21317,"byte_end":21320,"line_start":150,"line_end":150,"column_start":1,"column_end":4}},{"value":"/ ## Failure","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/allocation.rs","byte_start":21321,"byte_end":21335,"line_start":151,"line_end":151,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/allocation.rs","byte_start":21336,"byte_end":21339,"line_start":152,"line_end":152,"column_start":1,"column_end":4}},{"value":"/ * The start and end content type of the `Vec` must have the exact same","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/allocation.rs","byte_start":21340,"byte_end":21414,"line_start":153,"line_end":153,"column_start":1,"column_end":75}},{"value":"/   alignment.","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/allocation.rs","byte_start":21415,"byte_end":21431,"line_start":154,"line_end":154,"column_start":1,"column_end":17}},{"value":"/ * The start and end size of the `Vec` must have the exact same size.","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/allocation.rs","byte_start":21432,"byte_end":21504,"line_start":155,"line_end":155,"column_start":1,"column_end":73}},{"value":"/ * In the future this second restriction might be lessened by having the","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/allocation.rs","byte_start":21505,"byte_end":21580,"line_start":156,"line_end":156,"column_start":1,"column_end":76}},{"value":"/   capacity and length get adjusted during transmutation, but for now it's","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/allocation.rs","byte_start":21581,"byte_end":21658,"line_start":157,"line_end":157,"column_start":1,"column_end":78}},{"value":"/   absolute.","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/allocation.rs","byte_start":21659,"byte_end":21674,"line_start":158,"line_end":158,"column_start":1,"column_end":16}},{"value":"inline","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/allocation.rs","byte_start":21675,"byte_end":21684,"line_start":159,"line_end":159,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":66},"span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/allocation.rs","byte_start":23568,"byte_end":23586,"line_start":203,"line_end":203,"column_start":8,"column_end":26},"name":"pod_collect_to_vec","qualname":"::allocation::pod_collect_to_vec","value":"pub fn pod_collect_to_vec<A: Pod, B: Pod>(&[A]) -> Vec<B>","parent":null,"children":[],"decl_id":null,"docs":" This \"collects\" a slice of pod data into a vec of a different pod type.","sig":null,"attributes":[{"value":"/ This \"collects\" a slice of pod data into a vec of a different pod type.","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/allocation.rs","byte_start":22967,"byte_end":23042,"line_start":187,"line_end":187,"column_start":1,"column_end":76}},{"value":"/","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/allocation.rs","byte_start":23043,"byte_end":23046,"line_start":188,"line_end":188,"column_start":1,"column_end":4}},{"value":"/ Unlike with [`cast_slice`] and [`cast_slice_mut`], this will always work.","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/allocation.rs","byte_start":23047,"byte_end":23124,"line_start":189,"line_end":189,"column_start":1,"column_end":78}},{"value":"/","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/allocation.rs","byte_start":23125,"byte_end":23128,"line_start":190,"line_end":190,"column_start":1,"column_end":4}},{"value":"/ The output vec will be of a minimal size/capacity to hold the slice given.","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/allocation.rs","byte_start":23129,"byte_end":23207,"line_start":191,"line_end":191,"column_start":1,"column_end":79}},{"value":"/","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/allocation.rs","byte_start":23208,"byte_end":23211,"line_start":192,"line_end":192,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/allocation.rs","byte_start":23212,"byte_end":23223,"line_start":193,"line_end":193,"column_start":1,"column_end":12}},{"value":"/ # use bytemuck::*;","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/allocation.rs","byte_start":23224,"byte_end":23246,"line_start":194,"line_end":194,"column_start":1,"column_end":23}},{"value":"/ let halfwords: [u16; 4] = [5, 6, 7, 8];","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/allocation.rs","byte_start":23247,"byte_end":23290,"line_start":195,"line_end":195,"column_start":1,"column_end":44}},{"value":"/ let vec_of_words: Vec<u32> = pod_collect_to_vec(&halfwords);","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/allocation.rs","byte_start":23291,"byte_end":23355,"line_start":196,"line_end":196,"column_start":1,"column_end":65}},{"value":"/ if cfg!(target_endian = \"little\") {","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/allocation.rs","byte_start":23356,"byte_end":23395,"line_start":197,"line_end":197,"column_start":1,"column_end":40}},{"value":"/   assert_eq!(&vec_of_words[..], &[0x0006_0005, 0x0008_0007][..])","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/allocation.rs","byte_start":23396,"byte_end":23464,"line_start":198,"line_end":198,"column_start":1,"column_end":69}},{"value":"/ } else {","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/allocation.rs","byte_start":23465,"byte_end":23477,"line_start":199,"line_end":199,"column_start":1,"column_end":13}},{"value":"/   assert_eq!(&vec_of_words[..], &[0x0005_0006, 0x0007_0008][..])","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/allocation.rs","byte_start":23478,"byte_end":23546,"line_start":200,"line_end":200,"column_start":1,"column_end":69}},{"value":"/ }","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/allocation.rs","byte_start":23547,"byte_end":23552,"line_start":201,"line_end":201,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/allocation.rs","byte_start":23553,"byte_end":23560,"line_start":202,"line_end":202,"column_start":1,"column_end":8}}]},{"kind":"Trait","id":{"krate":0,"index":72},"span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/zeroable.rs","byte_start":24777,"byte_end":24785,"line_start":15,"line_end":15,"column_start":18,"column_end":26},"name":"Zeroable","qualname":"::zeroable::Zeroable","value":"Zeroable: Sized","parent":null,"children":[{"krate":0,"index":73}],"decl_id":null,"docs":" Trait for types that can be safely created with\n [`zeroed`](core::mem::zeroed).","sig":null,"attributes":[{"value":"/ Trait for types that can be safely created with","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/zeroable.rs","byte_start":24319,"byte_end":24370,"line_start":3,"line_end":3,"column_start":1,"column_end":52}},{"value":"/ [`zeroed`](core::mem::zeroed).","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/zeroable.rs","byte_start":24371,"byte_end":24405,"line_start":4,"line_end":4,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/zeroable.rs","byte_start":24406,"byte_end":24409,"line_start":5,"line_end":5,"column_start":1,"column_end":4}},{"value":"/ An all-zeroes value may or may not be the same value as the","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/zeroable.rs","byte_start":24410,"byte_end":24473,"line_start":6,"line_end":6,"column_start":1,"column_end":64}},{"value":"/ [Default](core::default::Default) value of the type.","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/zeroable.rs","byte_start":24474,"byte_end":24530,"line_start":7,"line_end":7,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/zeroable.rs","byte_start":24531,"byte_end":24534,"line_start":8,"line_end":8,"column_start":1,"column_end":4}},{"value":"/ ## Safety","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/zeroable.rs","byte_start":24535,"byte_end":24548,"line_start":9,"line_end":9,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/zeroable.rs","byte_start":24549,"byte_end":24552,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ * Your type must be inhabited (eg: no","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/zeroable.rs","byte_start":24553,"byte_end":24594,"line_start":11,"line_end":11,"column_start":1,"column_end":42}},{"value":"/   [Infallible](core::convert::Infallible)).","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/zeroable.rs","byte_start":24595,"byte_end":24642,"line_start":12,"line_end":12,"column_start":1,"column_end":48}},{"value":"/ * Your type must be allowed to be an \"all zeroes\" bit pattern (eg: no","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/zeroable.rs","byte_start":24643,"byte_end":24716,"line_start":13,"line_end":13,"column_start":1,"column_end":74}},{"value":"/   [`NonNull<T>`](core::ptr::NonNull)).","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/zeroable.rs","byte_start":24717,"byte_end":24759,"line_start":14,"line_end":14,"column_start":1,"column_end":43}}]},{"kind":"Method","id":{"krate":0,"index":73},"span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/zeroable.rs","byte_start":25065,"byte_end":25071,"line_start":22,"line_end":22,"column_start":6,"column_end":12},"name":"zeroed","qualname":"::zeroable::Zeroable::zeroed","value":"pub fn zeroed() -> Self","parent":{"krate":0,"index":72},"children":[],"decl_id":null,"docs":" Calls [`zeroed`](core::mem::zeroed).","sig":null,"attributes":[{"value":"/ Calls [`zeroed`](core::mem::zeroed).","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/zeroable.rs","byte_start":24797,"byte_end":24837,"line_start":16,"line_end":16,"column_start":3,"column_end":43}},{"value":"/","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/zeroable.rs","byte_start":24840,"byte_end":24843,"line_start":17,"line_end":17,"column_start":3,"column_end":6}},{"value":"/ This is a trait method so that you can write `MyType::zeroed()` in your","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/zeroable.rs","byte_start":24846,"byte_end":24921,"line_start":18,"line_end":18,"column_start":3,"column_end":78}},{"value":"/ code. It is a contract of this trait that if you implement it on your type","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/zeroable.rs","byte_start":24924,"byte_end":25002,"line_start":19,"line_end":19,"column_start":3,"column_end":81}},{"value":"/ you **must not** override this method.","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/zeroable.rs","byte_start":25005,"byte_end":25047,"line_start":20,"line_end":20,"column_start":3,"column_end":45}},{"value":"inline","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/zeroable.rs","byte_start":25050,"byte_end":25059,"line_start":21,"line_end":21,"column_start":3,"column_end":12}}]},{"kind":"Trait","id":{"krate":0,"index":169},"span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/pod.rs","byte_start":42507,"byte_end":42510,"line_start":29,"line_end":29,"column_start":18,"column_end":21},"name":"Pod","qualname":"::pod::Pod","value":"Pod: Zeroable + Copy + 'static","parent":null,"children":[],"decl_id":null,"docs":" Marker trait for \"plain old data\".","sig":null,"attributes":[{"value":"/ Marker trait for \"plain old data\".","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/pod.rs","byte_start":41211,"byte_end":41249,"line_start":3,"line_end":3,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/pod.rs","byte_start":41250,"byte_end":41253,"line_start":4,"line_end":4,"column_start":1,"column_end":4}},{"value":"/ The point of this trait is that once something is marked \"plain old data\"","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/pod.rs","byte_start":41254,"byte_end":41331,"line_start":5,"line_end":5,"column_start":1,"column_end":78}},{"value":"/ you can really go to town with the bit fiddling and bit casting. Therefore,","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/pod.rs","byte_start":41332,"byte_end":41411,"line_start":6,"line_end":6,"column_start":1,"column_end":80}},{"value":"/ it's a relatively strong claim to make about a type. Do not add this to your","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/pod.rs","byte_start":41412,"byte_end":41492,"line_start":7,"line_end":7,"column_start":1,"column_end":81}},{"value":"/ type casually.","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/pod.rs","byte_start":41493,"byte_end":41511,"line_start":8,"line_end":8,"column_start":1,"column_end":19}},{"value":"/","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/pod.rs","byte_start":41512,"byte_end":41515,"line_start":9,"line_end":9,"column_start":1,"column_end":4}},{"value":"/ **Reminder:** The results of casting around bytes between data types are","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/pod.rs","byte_start":41516,"byte_end":41592,"line_start":10,"line_end":10,"column_start":1,"column_end":77}},{"value":"/ _endian dependant_. Little-endian machines are the most common, but","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/pod.rs","byte_start":41593,"byte_end":41664,"line_start":11,"line_end":11,"column_start":1,"column_end":72}},{"value":"/ big-endian machines do exist (and big-endian is also used for \"network","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/pod.rs","byte_start":41665,"byte_end":41739,"line_start":12,"line_end":12,"column_start":1,"column_end":75}},{"value":"/ order\" bytes).","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/pod.rs","byte_start":41740,"byte_end":41758,"line_start":13,"line_end":13,"column_start":1,"column_end":19}},{"value":"/","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/pod.rs","byte_start":41759,"byte_end":41762,"line_start":14,"line_end":14,"column_start":1,"column_end":4}},{"value":"/ ## Safety","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/pod.rs","byte_start":41763,"byte_end":41776,"line_start":15,"line_end":15,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/pod.rs","byte_start":41777,"byte_end":41780,"line_start":16,"line_end":16,"column_start":1,"column_end":4}},{"value":"/ * The type must be inhabited (eg: no","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/pod.rs","byte_start":41781,"byte_end":41821,"line_start":17,"line_end":17,"column_start":1,"column_end":41}},{"value":"/   [Infallible](core::convert::Infallible)).","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/pod.rs","byte_start":41822,"byte_end":41869,"line_start":18,"line_end":18,"column_start":1,"column_end":48}},{"value":"/ * The type must allow any bit pattern (eg: no `bool` or `char`, which have","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/pod.rs","byte_start":41870,"byte_end":41948,"line_start":19,"line_end":19,"column_start":1,"column_end":79}},{"value":"/   illegal bit patterns).","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/pod.rs","byte_start":41949,"byte_end":41977,"line_start":20,"line_end":20,"column_start":1,"column_end":29}},{"value":"/ * The type must not contain any padding bytes, either in the middle or on","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/pod.rs","byte_start":41978,"byte_end":42055,"line_start":21,"line_end":21,"column_start":1,"column_end":78}},{"value":"/   the end (eg: no `#[repr(C)] struct Foo(u8, u16)`, which has padding in the","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/pod.rs","byte_start":42056,"byte_end":42136,"line_start":22,"line_end":22,"column_start":1,"column_end":81}},{"value":"/   middle, and also no `#[repr(C)] struct Foo(u16, u8)`, which has padding on","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/pod.rs","byte_start":42137,"byte_end":42217,"line_start":23,"line_end":23,"column_start":1,"column_end":81}},{"value":"/   the end).","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/pod.rs","byte_start":42218,"byte_end":42233,"line_start":24,"line_end":24,"column_start":1,"column_end":16}},{"value":"/ * The type needs to have all fields also be `Pod`.","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/pod.rs","byte_start":42234,"byte_end":42288,"line_start":25,"line_end":25,"column_start":1,"column_end":55}},{"value":"/ * The type needs to be `repr(C)` or `repr(transparent)`. In the case of","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/pod.rs","byte_start":42289,"byte_end":42364,"line_start":26,"line_end":26,"column_start":1,"column_end":76}},{"value":"/   `repr(C)`, the `packed` and `align` repr modifiers can be used as long as","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/pod.rs","byte_start":42365,"byte_end":42444,"line_start":27,"line_end":27,"column_start":1,"column_end":80}},{"value":"/   all other rules end up being followed.","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/pod.rs","byte_start":42445,"byte_end":42489,"line_start":28,"line_end":28,"column_start":1,"column_end":45}}]},{"kind":"Trait","id":{"krate":0,"index":213},"span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/contiguous.rs","byte_start":59879,"byte_end":59889,"line_start":78,"line_end":78,"column_start":18,"column_end":28},"name":"Contiguous","qualname":"::contiguous::Contiguous","value":"Contiguous: Copy + 'static","parent":null,"children":[{"krate":0,"index":214},{"krate":0,"index":215},{"krate":0,"index":216},{"krate":0,"index":217},{"krate":0,"index":218}],"decl_id":null,"docs":" A trait indicating that:","sig":null,"attributes":[{"value":"/ A trait indicating that:","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/contiguous.rs","byte_start":56911,"byte_end":56939,"line_start":3,"line_end":3,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/contiguous.rs","byte_start":56940,"byte_end":56943,"line_start":4,"line_end":4,"column_start":1,"column_end":4}},{"value":"/ 1. A type has an equivalent representation to some known integral type.","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/contiguous.rs","byte_start":56944,"byte_end":57019,"line_start":5,"line_end":5,"column_start":1,"column_end":76}},{"value":"/ 2. All instances of this type fall in a fixed range of values.","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/contiguous.rs","byte_start":57020,"byte_end":57086,"line_start":6,"line_end":6,"column_start":1,"column_end":67}},{"value":"/ 3. Within that range, there are no gaps.","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/contiguous.rs","byte_start":57087,"byte_end":57131,"line_start":7,"line_end":7,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/contiguous.rs","byte_start":57132,"byte_end":57135,"line_start":8,"line_end":8,"column_start":1,"column_end":4}},{"value":"/ This is generally useful for fieldless enums (aka \"c-style\" enums), however","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/contiguous.rs","byte_start":57136,"byte_end":57215,"line_start":9,"line_end":9,"column_start":1,"column_end":80}},{"value":"/ it's important that it only be used for those with an explicit `#[repr]`, as","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/contiguous.rs","byte_start":57216,"byte_end":57296,"line_start":10,"line_end":10,"column_start":1,"column_end":81}},{"value":"/ `#[repr(Rust)]` fieldess enums have an unspecified layout.","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/contiguous.rs","byte_start":57297,"byte_end":57359,"line_start":11,"line_end":11,"column_start":1,"column_end":63}},{"value":"/","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/contiguous.rs","byte_start":57360,"byte_end":57363,"line_start":12,"line_end":12,"column_start":1,"column_end":4}},{"value":"/ Additionally, you shouldn't assume that all implementations are enums. Any","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/contiguous.rs","byte_start":57364,"byte_end":57442,"line_start":13,"line_end":13,"column_start":1,"column_end":79}},{"value":"/ type which meets the requirements above while following the rules under","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/contiguous.rs","byte_start":57443,"byte_end":57518,"line_start":14,"line_end":14,"column_start":1,"column_end":76}},{"value":"/ \"Safety\" below is valid.","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/contiguous.rs","byte_start":57519,"byte_end":57547,"line_start":15,"line_end":15,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/contiguous.rs","byte_start":57548,"byte_end":57551,"line_start":16,"line_end":16,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/contiguous.rs","byte_start":57552,"byte_end":57565,"line_start":17,"line_end":17,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/contiguous.rs","byte_start":57566,"byte_end":57569,"line_start":18,"line_end":18,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/contiguous.rs","byte_start":57570,"byte_end":57577,"line_start":19,"line_end":19,"column_start":1,"column_end":8}},{"value":"/ # use bytemuck::Contiguous;","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/contiguous.rs","byte_start":57578,"byte_end":57609,"line_start":20,"line_end":20,"column_start":1,"column_end":32}},{"value":"/ #[repr(u8)]","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/contiguous.rs","byte_start":57610,"byte_end":57625,"line_start":21,"line_end":21,"column_start":1,"column_end":16}},{"value":"/ #[derive(Debug, Copy, Clone, PartialEq)]","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/contiguous.rs","byte_start":57626,"byte_end":57670,"line_start":22,"line_end":22,"column_start":1,"column_end":45}},{"value":"/ enum Foo {","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/contiguous.rs","byte_start":57671,"byte_end":57685,"line_start":23,"line_end":23,"column_start":1,"column_end":15}},{"value":"/   A = 0,","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/contiguous.rs","byte_start":57686,"byte_end":57698,"line_start":24,"line_end":24,"column_start":1,"column_end":13}},{"value":"/   B = 1,","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/contiguous.rs","byte_start":57699,"byte_end":57711,"line_start":25,"line_end":25,"column_start":1,"column_end":13}},{"value":"/   C = 2,","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/contiguous.rs","byte_start":57712,"byte_end":57724,"line_start":26,"line_end":26,"column_start":1,"column_end":13}},{"value":"/   D = 3,","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/contiguous.rs","byte_start":57725,"byte_end":57737,"line_start":27,"line_end":27,"column_start":1,"column_end":13}},{"value":"/   E = 4,","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/contiguous.rs","byte_start":57738,"byte_end":57750,"line_start":28,"line_end":28,"column_start":1,"column_end":13}},{"value":"/ }","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/contiguous.rs","byte_start":57751,"byte_end":57756,"line_start":29,"line_end":29,"column_start":1,"column_end":6}},{"value":"/ unsafe impl Contiguous for Foo {","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/contiguous.rs","byte_start":57757,"byte_end":57793,"line_start":30,"line_end":30,"column_start":1,"column_end":37}},{"value":"/   type Int = u8;","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/contiguous.rs","byte_start":57794,"byte_end":57814,"line_start":31,"line_end":31,"column_start":1,"column_end":21}},{"value":"/   const MIN_VALUE: u8 = Foo::A as u8;","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/contiguous.rs","byte_start":57815,"byte_end":57856,"line_start":32,"line_end":32,"column_start":1,"column_end":42}},{"value":"/   const MAX_VALUE: u8 = Foo::E as u8;","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/contiguous.rs","byte_start":57857,"byte_end":57898,"line_start":33,"line_end":33,"column_start":1,"column_end":42}},{"value":"/ }","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/contiguous.rs","byte_start":57899,"byte_end":57904,"line_start":34,"line_end":34,"column_start":1,"column_end":6}},{"value":"/ assert_eq!(Foo::from_integer(3).unwrap(), Foo::D);","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/contiguous.rs","byte_start":57905,"byte_end":57959,"line_start":35,"line_end":35,"column_start":1,"column_end":55}},{"value":"/ assert_eq!(Foo::from_integer(8), None);","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/contiguous.rs","byte_start":57960,"byte_end":58003,"line_start":36,"line_end":36,"column_start":1,"column_end":44}},{"value":"/ assert_eq!(Foo::C.into_integer(), 2);","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/contiguous.rs","byte_start":58004,"byte_end":58045,"line_start":37,"line_end":37,"column_start":1,"column_end":42}},{"value":"/ ```","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/contiguous.rs","byte_start":58046,"byte_end":58053,"line_start":38,"line_end":38,"column_start":1,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/contiguous.rs","byte_start":58054,"byte_end":58066,"line_start":39,"line_end":39,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/contiguous.rs","byte_start":58067,"byte_end":58070,"line_start":40,"line_end":40,"column_start":1,"column_end":4}},{"value":"/ This is an unsafe trait, and incorrectly implementing it is undefined","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/contiguous.rs","byte_start":58071,"byte_end":58144,"line_start":41,"line_end":41,"column_start":1,"column_end":74}},{"value":"/ behavior.","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/contiguous.rs","byte_start":58145,"byte_end":58158,"line_start":42,"line_end":42,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/contiguous.rs","byte_start":58159,"byte_end":58162,"line_start":43,"line_end":43,"column_start":1,"column_end":4}},{"value":"/ Informally, by implementing it, you're asserting that `C` is identical to","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/contiguous.rs","byte_start":58163,"byte_end":58240,"line_start":44,"line_end":44,"column_start":1,"column_end":78}},{"value":"/ the integral type `C::Int`, and that every `C` falls between `C::MIN_VALUE`","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/contiguous.rs","byte_start":58241,"byte_end":58320,"line_start":45,"line_end":45,"column_start":1,"column_end":80}},{"value":"/ and `C::MAX_VALUE` exactly once, without any gaps.","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/contiguous.rs","byte_start":58321,"byte_end":58375,"line_start":46,"line_end":46,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/contiguous.rs","byte_start":58376,"byte_end":58379,"line_start":47,"line_end":47,"column_start":1,"column_end":4}},{"value":"/ Precisely, the guarantees you must uphold when implementing `Contiguous` for","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/contiguous.rs","byte_start":58380,"byte_end":58460,"line_start":48,"line_end":48,"column_start":1,"column_end":81}},{"value":"/ some type `C` are:","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/contiguous.rs","byte_start":58461,"byte_end":58483,"line_start":49,"line_end":49,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/contiguous.rs","byte_start":58484,"byte_end":58487,"line_start":50,"line_end":50,"column_start":1,"column_end":4}},{"value":"/ 1. The size of `C` and `C::Int` must be the same, and neither may be a ZST.","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/contiguous.rs","byte_start":58488,"byte_end":58568,"line_start":51,"line_end":51,"column_start":1,"column_end":80}},{"value":"/    (Note: alignment is explicitly allowed to differ)","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/contiguous.rs","byte_start":58569,"byte_end":58625,"line_start":52,"line_end":52,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/contiguous.rs","byte_start":58626,"byte_end":58629,"line_start":53,"line_end":53,"column_start":1,"column_end":4}},{"value":"/ 2. `C::Int` must be a primitive integer, and not a wrapper type. In the","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/contiguous.rs","byte_start":58630,"byte_end":58705,"line_start":54,"line_end":54,"column_start":1,"column_end":76}},{"value":"/    future, this may be lifted to include cases where the behavior is","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/contiguous.rs","byte_start":58706,"byte_end":58778,"line_start":55,"line_end":55,"column_start":1,"column_end":73}},{"value":"/    identical for a relevant set of traits (Ord, arithmetic, ...).","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/contiguous.rs","byte_start":58779,"byte_end":58848,"line_start":56,"line_end":56,"column_start":1,"column_end":70}},{"value":"/","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/contiguous.rs","byte_start":58849,"byte_end":58852,"line_start":57,"line_end":57,"column_start":1,"column_end":4}},{"value":"/ 3. All `C::Int`s which are in the *inclusive* range between `C::MIN_VALUE`","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/contiguous.rs","byte_start":58853,"byte_end":58931,"line_start":58,"line_end":58,"column_start":1,"column_end":79}},{"value":"/    and `C::MAX_VALUE` are bitwise identical to unique valid instances of","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/contiguous.rs","byte_start":58932,"byte_end":59008,"line_start":59,"line_end":59,"column_start":1,"column_end":77}},{"value":"/    `C`.","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/contiguous.rs","byte_start":59009,"byte_end":59020,"line_start":60,"line_end":60,"column_start":1,"column_end":12}},{"value":"/","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/contiguous.rs","byte_start":59021,"byte_end":59024,"line_start":61,"line_end":61,"column_start":1,"column_end":4}},{"value":"/ 4. There exist no instances of `C` such that their bitpatterns, when","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/contiguous.rs","byte_start":59025,"byte_end":59097,"line_start":62,"line_end":62,"column_start":1,"column_end":73}},{"value":"/    interpreted as instances of `C::Int`, fall outside of the `MAX_VALUE` /","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/contiguous.rs","byte_start":59098,"byte_end":59176,"line_start":63,"line_end":63,"column_start":1,"column_end":79}},{"value":"/    `MIN_VALUE` range -- It is legal for unsafe code to assume that if it","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/contiguous.rs","byte_start":59177,"byte_end":59253,"line_start":64,"line_end":64,"column_start":1,"column_end":77}},{"value":"/    gets a `C` that implements `Contiguous`, it is in the appropriate range.","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/contiguous.rs","byte_start":59254,"byte_end":59333,"line_start":65,"line_end":65,"column_start":1,"column_end":80}},{"value":"/","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/contiguous.rs","byte_start":59334,"byte_end":59337,"line_start":66,"line_end":66,"column_start":1,"column_end":4}},{"value":"/ 5. Finally, you promise not to provide overridden implementations of","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/contiguous.rs","byte_start":59338,"byte_end":59410,"line_start":67,"line_end":67,"column_start":1,"column_end":73}},{"value":"/    `Contiguous::from_integer` and `Contiguous::into_integer`.","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/contiguous.rs","byte_start":59411,"byte_end":59476,"line_start":68,"line_end":68,"column_start":1,"column_end":66}},{"value":"/","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/contiguous.rs","byte_start":59477,"byte_end":59480,"line_start":69,"line_end":69,"column_start":1,"column_end":4}},{"value":"/ For clarity, the following rules could be derived from the above, but are","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/contiguous.rs","byte_start":59481,"byte_end":59558,"line_start":70,"line_end":70,"column_start":1,"column_end":78}},{"value":"/ listed explicitly:","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/contiguous.rs","byte_start":59559,"byte_end":59581,"line_start":71,"line_end":71,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/contiguous.rs","byte_start":59582,"byte_end":59585,"line_start":72,"line_end":72,"column_start":1,"column_end":4}},{"value":"/ - `C::MAX_VALUE` must be greater or equal to `C::MIN_VALUE` (therefore, `C`","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/contiguous.rs","byte_start":59586,"byte_end":59665,"line_start":73,"line_end":73,"column_start":1,"column_end":80}},{"value":"/   must be an inhabited type).","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/contiguous.rs","byte_start":59666,"byte_end":59699,"line_start":74,"line_end":74,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/contiguous.rs","byte_start":59700,"byte_end":59703,"line_start":75,"line_end":75,"column_start":1,"column_end":4}},{"value":"/ - There exist no two values between `MIN_VALUE` and `MAX_VALUE` such that","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/contiguous.rs","byte_start":59704,"byte_end":59781,"line_start":76,"line_end":76,"column_start":1,"column_end":78}},{"value":"/   when interpreted as a `C` they are considered identical (by, say, match).","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/contiguous.rs","byte_start":59782,"byte_end":59861,"line_start":77,"line_end":77,"column_start":1,"column_end":80}}]},{"kind":"Type","id":{"krate":0,"index":214},"span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/contiguous.rs","byte_start":60714,"byte_end":60717,"line_start":96,"line_end":96,"column_start":8,"column_end":11},"name":"Int","qualname":"::contiguous::Contiguous::Int","value":"type Int: Copy + Ord;","parent":{"krate":0,"index":213},"children":[],"decl_id":null,"docs":" The primitive integer type with an identical representation to this\n type.","sig":null,"attributes":[{"value":"/ The primitive integer type with an identical representation to this","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/contiguous.rs","byte_start":59910,"byte_end":59981,"line_start":79,"line_end":79,"column_start":3,"column_end":74}},{"value":"/ type.","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/contiguous.rs","byte_start":59984,"byte_end":59993,"line_start":80,"line_end":80,"column_start":3,"column_end":12}},{"value":"/","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/contiguous.rs","byte_start":59996,"byte_end":59999,"line_start":81,"line_end":81,"column_start":3,"column_end":6}},{"value":"/ Contiguous is broadly intended for use with fieldless enums, and for","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/contiguous.rs","byte_start":60002,"byte_end":60074,"line_start":82,"line_end":82,"column_start":3,"column_end":75}},{"value":"/ these the correct integer type is easy: The enum should have a","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/contiguous.rs","byte_start":60077,"byte_end":60143,"line_start":83,"line_end":83,"column_start":3,"column_end":69}},{"value":"/ `#[repr(Int)]` or `#[repr(C)]` attribute, (if it does not, it is","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/contiguous.rs","byte_start":60146,"byte_end":60214,"line_start":84,"line_end":84,"column_start":3,"column_end":71}},{"value":"/ *unsound* to implement `Contiguous`!).","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/contiguous.rs","byte_start":60217,"byte_end":60259,"line_start":85,"line_end":85,"column_start":3,"column_end":45}},{"value":"/","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/contiguous.rs","byte_start":60262,"byte_end":60265,"line_start":86,"line_end":86,"column_start":3,"column_end":6}},{"value":"/ - For `#[repr(Int)]`, use the listed `Int`. e.g. `#[repr(u8)]` should use","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/contiguous.rs","byte_start":60268,"byte_end":60345,"line_start":87,"line_end":87,"column_start":3,"column_end":80}},{"value":"/   `type Int = u8`.","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/contiguous.rs","byte_start":60348,"byte_end":60370,"line_start":88,"line_end":88,"column_start":3,"column_end":25}},{"value":"/","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/contiguous.rs","byte_start":60373,"byte_end":60376,"line_start":89,"line_end":89,"column_start":3,"column_end":6}},{"value":"/ - For `#[repr(C)]`, use whichever type the C compiler will use to","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/contiguous.rs","byte_start":60379,"byte_end":60448,"line_start":90,"line_end":90,"column_start":3,"column_end":72}},{"value":"/   represent the given enum. This is usually `c_int` (from `std::os::raw`","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/contiguous.rs","byte_start":60451,"byte_end":60527,"line_start":91,"line_end":91,"column_start":3,"column_end":79}},{"value":"/   or `libc`), but it's up to you to make the determination as the","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/contiguous.rs","byte_start":60530,"byte_end":60599,"line_start":92,"line_end":92,"column_start":3,"column_end":72}},{"value":"/   implementer of the unsafe trait.","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/contiguous.rs","byte_start":60602,"byte_end":60640,"line_start":93,"line_end":93,"column_start":3,"column_end":41}},{"value":"/","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/contiguous.rs","byte_start":60643,"byte_end":60646,"line_start":94,"line_end":94,"column_start":3,"column_end":6}},{"value":"/ For precise rules, see the list under \"Safety\" above.","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/contiguous.rs","byte_start":60649,"byte_end":60706,"line_start":95,"line_end":95,"column_start":3,"column_end":60}}]},{"kind":"Const","id":{"krate":0,"index":215},"span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/contiguous.rs","byte_start":60808,"byte_end":60817,"line_start":99,"line_end":99,"column_start":9,"column_end":18},"name":"MAX_VALUE","qualname":"::contiguous::Contiguous::MAX_VALUE","value":"Self::Int","parent":{"krate":0,"index":213},"children":[],"decl_id":null,"docs":" The upper *inclusive* bound for valid instances of this type.\n","sig":null,"attributes":[{"value":"/ The upper *inclusive* bound for valid instances of this type.","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/contiguous.rs","byte_start":60734,"byte_end":60799,"line_start":98,"line_end":98,"column_start":3,"column_end":68}}]},{"kind":"Const","id":{"krate":0,"index":216},"span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/contiguous.rs","byte_start":60907,"byte_end":60916,"line_start":102,"line_end":102,"column_start":9,"column_end":18},"name":"MIN_VALUE","qualname":"::contiguous::Contiguous::MIN_VALUE","value":"Self::Int","parent":{"krate":0,"index":213},"children":[],"decl_id":null,"docs":" The lower *inclusive* bound for valid instances of this type.\n","sig":null,"attributes":[{"value":"/ The lower *inclusive* bound for valid instances of this type.","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/contiguous.rs","byte_start":60833,"byte_end":60898,"line_start":101,"line_end":101,"column_start":3,"column_end":68}}]},{"kind":"Method","id":{"krate":0,"index":217},"span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/contiguous.rs","byte_start":61581,"byte_end":61593,"line_start":119,"line_end":119,"column_start":6,"column_end":18},"name":"from_integer","qualname":"::contiguous::Contiguous::from_integer","value":"pub fn from_integer(Self::Int) -> Option<Self>","parent":{"krate":0,"index":213},"children":[],"decl_id":null,"docs":" If `value` is within the range for valid instances of this type,\n returns `Some(converted_value)`, otherwise, returns `None`.","sig":null,"attributes":[{"value":"/ If `value` is within the range for valid instances of this type,","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/contiguous.rs","byte_start":60932,"byte_end":61000,"line_start":104,"line_end":104,"column_start":3,"column_end":71}},{"value":"/ returns `Some(converted_value)`, otherwise, returns `None`.","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/contiguous.rs","byte_start":61003,"byte_end":61066,"line_start":105,"line_end":105,"column_start":3,"column_end":66}},{"value":"/","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/contiguous.rs","byte_start":61069,"byte_end":61072,"line_start":106,"line_end":106,"column_start":3,"column_end":6}},{"value":"/ This is a trait method so that you can write `value.into_integer()` in","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/contiguous.rs","byte_start":61075,"byte_end":61149,"line_start":107,"line_end":107,"column_start":3,"column_end":77}},{"value":"/ your code. It is a contract of this trait that if you implement","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/contiguous.rs","byte_start":61152,"byte_end":61219,"line_start":108,"line_end":108,"column_start":3,"column_end":70}},{"value":"/ `Contiguous` on your type you **must not** override this method.","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/contiguous.rs","byte_start":61222,"byte_end":61290,"line_start":109,"line_end":109,"column_start":3,"column_end":71}},{"value":"/","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/contiguous.rs","byte_start":61293,"byte_end":61296,"line_start":110,"line_end":110,"column_start":3,"column_end":6}},{"value":"/ # Panics","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/contiguous.rs","byte_start":61299,"byte_end":61311,"line_start":111,"line_end":111,"column_start":3,"column_end":15}},{"value":"/","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/contiguous.rs","byte_start":61314,"byte_end":61317,"line_start":112,"line_end":112,"column_start":3,"column_end":6}},{"value":"/ We will not panic for any correct implementation of `Contiguous`, but","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/contiguous.rs","byte_start":61320,"byte_end":61393,"line_start":113,"line_end":113,"column_start":3,"column_end":76}},{"value":"/ *may* panic if we detect an incorrect one.","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/contiguous.rs","byte_start":61396,"byte_end":61442,"line_start":114,"line_end":114,"column_start":3,"column_end":49}},{"value":"/","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/contiguous.rs","byte_start":61445,"byte_end":61448,"line_start":115,"line_end":115,"column_start":3,"column_end":6}},{"value":"/ This is undefined behavior regardless, so it could have been the nasal","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/contiguous.rs","byte_start":61451,"byte_end":61525,"line_start":116,"line_end":116,"column_start":3,"column_end":77}},{"value":"/ demons at that point anyway ;).","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/contiguous.rs","byte_start":61528,"byte_end":61563,"line_start":117,"line_end":117,"column_start":3,"column_end":38}},{"value":"inline","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/contiguous.rs","byte_start":61566,"byte_end":61575,"line_start":118,"line_end":118,"column_start":3,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":218},"span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/contiguous.rs","byte_start":63116,"byte_end":63128,"line_start":154,"line_end":154,"column_start":6,"column_end":18},"name":"into_integer","qualname":"::contiguous::Contiguous::into_integer","value":"pub fn into_integer(Self) -> Self::Int","parent":{"krate":0,"index":213},"children":[],"decl_id":null,"docs":" Perform the conversion from `C` into the underlying integral type. This\n mostly exists otherwise generic code would need unsafe for the `value as\n integer`","sig":null,"attributes":[{"value":"/ Perform the conversion from `C` into the underlying integral type. This","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/contiguous.rs","byte_start":62432,"byte_end":62507,"line_start":138,"line_end":138,"column_start":3,"column_end":78}},{"value":"/ mostly exists otherwise generic code would need unsafe for the `value as","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/contiguous.rs","byte_start":62510,"byte_end":62586,"line_start":139,"line_end":139,"column_start":3,"column_end":79}},{"value":"/ integer`","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/contiguous.rs","byte_start":62589,"byte_end":62601,"line_start":140,"line_end":140,"column_start":3,"column_end":15}},{"value":"/","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/contiguous.rs","byte_start":62604,"byte_end":62607,"line_start":141,"line_end":141,"column_start":3,"column_end":6}},{"value":"/ This is a trait method so that you can write `value.into_integer()` in","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/contiguous.rs","byte_start":62610,"byte_end":62684,"line_start":142,"line_end":142,"column_start":3,"column_end":77}},{"value":"/ your code. It is a contract of this trait that if you implement","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/contiguous.rs","byte_start":62687,"byte_end":62754,"line_start":143,"line_end":143,"column_start":3,"column_end":70}},{"value":"/ `Contiguous` on your type you **must not** override this method.","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/contiguous.rs","byte_start":62757,"byte_end":62825,"line_start":144,"line_end":144,"column_start":3,"column_end":71}},{"value":"/","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/contiguous.rs","byte_start":62828,"byte_end":62831,"line_start":145,"line_end":145,"column_start":3,"column_end":6}},{"value":"/ # Panics","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/contiguous.rs","byte_start":62834,"byte_end":62846,"line_start":146,"line_end":146,"column_start":3,"column_end":15}},{"value":"/","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/contiguous.rs","byte_start":62849,"byte_end":62852,"line_start":147,"line_end":147,"column_start":3,"column_end":6}},{"value":"/ We will not panic for any correct implementation of `Contiguous`, but","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/contiguous.rs","byte_start":62855,"byte_end":62928,"line_start":148,"line_end":148,"column_start":3,"column_end":76}},{"value":"/ *may* panic if we detect an incorrect one.","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/contiguous.rs","byte_start":62931,"byte_end":62977,"line_start":149,"line_end":149,"column_start":3,"column_end":49}},{"value":"/","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/contiguous.rs","byte_start":62980,"byte_end":62983,"line_start":150,"line_end":150,"column_start":3,"column_end":6}},{"value":"/ This is undefined behavior regardless, so it could have been the nasal","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/contiguous.rs","byte_start":62986,"byte_end":63060,"line_start":151,"line_end":151,"column_start":3,"column_end":77}},{"value":"/ demons at that point anyway ;).","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/contiguous.rs","byte_start":63063,"byte_end":63098,"line_start":152,"line_end":152,"column_start":3,"column_end":38}},{"value":"inline","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/contiguous.rs","byte_start":63101,"byte_end":63110,"line_start":153,"line_end":153,"column_start":3,"column_end":12}}]},{"kind":"Trait","id":{"krate":0,"index":226},"span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/transparent.rs","byte_start":73262,"byte_end":73280,"line_start":87,"line_end":87,"column_start":18,"column_end":36},"name":"TransparentWrapper","qualname":"::transparent::TransparentWrapper","value":"TransparentWrapper<Inner: ?Sized>","parent":null,"children":[{"krate":0,"index":228},{"krate":0,"index":229},{"krate":0,"index":230},{"krate":0,"index":231},{"krate":0,"index":232},{"krate":0,"index":233},{"krate":0,"index":234},{"krate":0,"index":235},{"krate":0,"index":236},{"krate":0,"index":237}],"decl_id":null,"docs":" A trait which indicates that a type is a `#[repr(transparent)]` wrapper\n around the `Inner` value.","sig":null,"attributes":[{"value":"/ A trait which indicates that a type is a `#[repr(transparent)]` wrapper","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/transparent.rs","byte_start":70173,"byte_end":70248,"line_start":3,"line_end":3,"column_start":1,"column_end":76}},{"value":"/ around the `Inner` value.","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/transparent.rs","byte_start":70249,"byte_end":70278,"line_start":4,"line_end":4,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/transparent.rs","byte_start":70279,"byte_end":70282,"line_start":5,"line_end":5,"column_start":1,"column_end":4}},{"value":"/ This allows safely copy transmuting between the `Inner` type and the","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/transparent.rs","byte_start":70283,"byte_end":70355,"line_start":6,"line_end":6,"column_start":1,"column_end":73}},{"value":"/ `TransparentWrapper` type. Functions like `wrap_{}` convert from the inner","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/transparent.rs","byte_start":70356,"byte_end":70434,"line_start":7,"line_end":7,"column_start":1,"column_end":79}},{"value":"/ type to the wrapper type and `peel_{}` functions do the inverse conversion","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/transparent.rs","byte_start":70435,"byte_end":70513,"line_start":8,"line_end":8,"column_start":1,"column_end":79}},{"value":"/ from the wrapper type to the inner type. We deliberately do not call the","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/transparent.rs","byte_start":70514,"byte_end":70590,"line_start":9,"line_end":9,"column_start":1,"column_end":77}},{"value":"/ wrapper-removing methods \"unwrap\" because at this point that word is too","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/transparent.rs","byte_start":70591,"byte_end":70667,"line_start":10,"line_end":10,"column_start":1,"column_end":77}},{"value":"/ strongly tied to the Option/ Result methods.","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/transparent.rs","byte_start":70668,"byte_end":70716,"line_start":11,"line_end":11,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/transparent.rs","byte_start":70717,"byte_end":70720,"line_start":12,"line_end":12,"column_start":1,"column_end":4}},{"value":"/ # Safety","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/transparent.rs","byte_start":70721,"byte_end":70733,"line_start":13,"line_end":13,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/transparent.rs","byte_start":70734,"byte_end":70737,"line_start":14,"line_end":14,"column_start":1,"column_end":4}},{"value":"/ The safety contract of `TransparentWrapper` is relatively simple:","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/transparent.rs","byte_start":70738,"byte_end":70807,"line_start":15,"line_end":15,"column_start":1,"column_end":70}},{"value":"/","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/transparent.rs","byte_start":70808,"byte_end":70811,"line_start":16,"line_end":16,"column_start":1,"column_end":4}},{"value":"/ For a given `Wrapper` which implements `TransparentWrapper<Inner>`:","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/transparent.rs","byte_start":70812,"byte_end":70883,"line_start":17,"line_end":17,"column_start":1,"column_end":72}},{"value":"/","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/transparent.rs","byte_start":70884,"byte_end":70887,"line_start":18,"line_end":18,"column_start":1,"column_end":4}},{"value":"/ 1. `Wrapper` must be a wrapper around `Inner` with an identical data","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/transparent.rs","byte_start":70888,"byte_end":70960,"line_start":19,"line_end":19,"column_start":1,"column_end":73}},{"value":"/    representations. This    either means that it must be a","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/transparent.rs","byte_start":70961,"byte_end":71023,"line_start":20,"line_end":20,"column_start":1,"column_end":63}},{"value":"/    `#[repr(transparent)]` struct which    contains a either a field of type","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/transparent.rs","byte_start":71024,"byte_end":71103,"line_start":21,"line_end":21,"column_start":1,"column_end":80}},{"value":"/    `Inner` (or a field of some other    transparent wrapper for `Inner`) as","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/transparent.rs","byte_start":71104,"byte_end":71183,"line_start":22,"line_end":22,"column_start":1,"column_end":80}},{"value":"/    the only non-ZST field.","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/transparent.rs","byte_start":71184,"byte_end":71214,"line_start":23,"line_end":23,"column_start":1,"column_end":31}},{"value":"/","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/transparent.rs","byte_start":71215,"byte_end":71218,"line_start":24,"line_end":24,"column_start":1,"column_end":4}},{"value":"/ 2. Any fields *other* than the `Inner` field must be trivially constructable","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/transparent.rs","byte_start":71219,"byte_end":71299,"line_start":25,"line_end":25,"column_start":1,"column_end":81}},{"value":"/    ZSTs, for example `PhantomData`, `PhantomPinned`, etc.","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/transparent.rs","byte_start":71300,"byte_end":71361,"line_start":26,"line_end":26,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/transparent.rs","byte_start":71362,"byte_end":71365,"line_start":27,"line_end":27,"column_start":1,"column_end":4}},{"value":"/ 3. The `Wrapper` may not impose additional alignment requirements over","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/transparent.rs","byte_start":71366,"byte_end":71440,"line_start":28,"line_end":28,"column_start":1,"column_end":75}},{"value":"/    `Inner`.","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/transparent.rs","byte_start":71441,"byte_end":71456,"line_start":29,"line_end":29,"column_start":1,"column_end":16}},{"value":"/     - Note: this is currently guaranteed by `repr(transparent)`, but there","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/transparent.rs","byte_start":71457,"byte_end":71535,"line_start":30,"line_end":30,"column_start":1,"column_end":79}},{"value":"/       have been discussions of lifting it, so it's stated here explicitly.","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/transparent.rs","byte_start":71536,"byte_end":71614,"line_start":31,"line_end":31,"column_start":1,"column_end":79}},{"value":"/","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/transparent.rs","byte_start":71615,"byte_end":71618,"line_start":32,"line_end":32,"column_start":1,"column_end":4}},{"value":"/ 4. All functions on `TransparentWrapper` **may not** be overridden.","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/transparent.rs","byte_start":71619,"byte_end":71690,"line_start":33,"line_end":33,"column_start":1,"column_end":72}},{"value":"/","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/transparent.rs","byte_start":71691,"byte_end":71694,"line_start":34,"line_end":34,"column_start":1,"column_end":4}},{"value":"/ ## Caveats","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/transparent.rs","byte_start":71695,"byte_end":71709,"line_start":35,"line_end":35,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/transparent.rs","byte_start":71710,"byte_end":71713,"line_start":36,"line_end":36,"column_start":1,"column_end":4}},{"value":"/ If the wrapper imposes additional constraints upon the inner type which are","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/transparent.rs","byte_start":71714,"byte_end":71793,"line_start":37,"line_end":37,"column_start":1,"column_end":80}},{"value":"/ required for safety, it's responsible for ensuring those still hold -- this","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/transparent.rs","byte_start":71794,"byte_end":71873,"line_start":38,"line_end":38,"column_start":1,"column_end":80}},{"value":"/ generally requires preventing access to instances of the inner type, as","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/transparent.rs","byte_start":71874,"byte_end":71949,"line_start":39,"line_end":39,"column_start":1,"column_end":76}},{"value":"/ implementing `TransparentWrapper<U> for T` means anybody can call","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/transparent.rs","byte_start":71950,"byte_end":72019,"line_start":40,"line_end":40,"column_start":1,"column_end":70}},{"value":"/ `T::cast_ref(any_instance_of_u)`.","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/transparent.rs","byte_start":72020,"byte_end":72057,"line_start":41,"line_end":41,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/transparent.rs","byte_start":72058,"byte_end":72061,"line_start":42,"line_end":42,"column_start":1,"column_end":4}},{"value":"/ For example, it would be invalid to implement TransparentWrapper for `str`","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/transparent.rs","byte_start":72062,"byte_end":72140,"line_start":43,"line_end":43,"column_start":1,"column_end":79}},{"value":"/ to implement `TransparentWrapper` around `[u8]` because of this.","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/transparent.rs","byte_start":72141,"byte_end":72209,"line_start":44,"line_end":44,"column_start":1,"column_end":69}},{"value":"/","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/transparent.rs","byte_start":72210,"byte_end":72213,"line_start":45,"line_end":45,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/transparent.rs","byte_start":72214,"byte_end":72228,"line_start":46,"line_end":46,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/transparent.rs","byte_start":72229,"byte_end":72232,"line_start":47,"line_end":47,"column_start":1,"column_end":4}},{"value":"/ ## Basic","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/transparent.rs","byte_start":72233,"byte_end":72245,"line_start":48,"line_end":48,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/transparent.rs","byte_start":72246,"byte_end":72249,"line_start":49,"line_end":49,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/transparent.rs","byte_start":72250,"byte_end":72257,"line_start":50,"line_end":50,"column_start":1,"column_end":8}},{"value":"/ use bytemuck::TransparentWrapper;","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/transparent.rs","byte_start":72258,"byte_end":72295,"line_start":51,"line_end":51,"column_start":1,"column_end":38}},{"value":"/ # #[derive(Default)]","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/transparent.rs","byte_start":72296,"byte_end":72320,"line_start":52,"line_end":52,"column_start":1,"column_end":25}},{"value":"/ # struct SomeStruct(u32);","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/transparent.rs","byte_start":72321,"byte_end":72350,"line_start":53,"line_end":53,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/transparent.rs","byte_start":72351,"byte_end":72354,"line_start":54,"line_end":54,"column_start":1,"column_end":4}},{"value":"/ #[repr(transparent)]","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/transparent.rs","byte_start":72355,"byte_end":72379,"line_start":55,"line_end":55,"column_start":1,"column_end":25}},{"value":"/ struct MyWrapper(SomeStruct);","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/transparent.rs","byte_start":72380,"byte_end":72413,"line_start":56,"line_end":56,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/transparent.rs","byte_start":72414,"byte_end":72417,"line_start":57,"line_end":57,"column_start":1,"column_end":4}},{"value":"/ unsafe impl TransparentWrapper<SomeStruct> for MyWrapper {}","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/transparent.rs","byte_start":72418,"byte_end":72481,"line_start":58,"line_end":58,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/transparent.rs","byte_start":72482,"byte_end":72485,"line_start":59,"line_end":59,"column_start":1,"column_end":4}},{"value":"/ // interpret a reference to &SomeStruct as a &MyWrapper","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/transparent.rs","byte_start":72486,"byte_end":72545,"line_start":60,"line_end":60,"column_start":1,"column_end":60}},{"value":"/ let thing = SomeStruct::default();","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/transparent.rs","byte_start":72546,"byte_end":72584,"line_start":61,"line_end":61,"column_start":1,"column_end":39}},{"value":"/ let inner_ref: &MyWrapper = MyWrapper::wrap_ref(&thing);","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/transparent.rs","byte_start":72585,"byte_end":72645,"line_start":62,"line_end":62,"column_start":1,"column_end":61}},{"value":"/","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/transparent.rs","byte_start":72646,"byte_end":72649,"line_start":63,"line_end":63,"column_start":1,"column_end":4}},{"value":"/ // Works with &mut too.","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/transparent.rs","byte_start":72650,"byte_end":72677,"line_start":64,"line_end":64,"column_start":1,"column_end":28}},{"value":"/ let mut mut_thing = SomeStruct::default();","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/transparent.rs","byte_start":72678,"byte_end":72724,"line_start":65,"line_end":65,"column_start":1,"column_end":47}},{"value":"/ let inner_mut: &mut MyWrapper = MyWrapper::wrap_mut(&mut mut_thing);","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/transparent.rs","byte_start":72725,"byte_end":72797,"line_start":66,"line_end":66,"column_start":1,"column_end":73}},{"value":"/","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/transparent.rs","byte_start":72798,"byte_end":72801,"line_start":67,"line_end":67,"column_start":1,"column_end":4}},{"value":"/ # let _ = (inner_ref, inner_mut); // silence warnings","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/transparent.rs","byte_start":72802,"byte_end":72859,"line_start":68,"line_end":68,"column_start":1,"column_end":58}},{"value":"/ ```","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/transparent.rs","byte_start":72860,"byte_end":72867,"line_start":69,"line_end":69,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/transparent.rs","byte_start":72868,"byte_end":72871,"line_start":70,"line_end":70,"column_start":1,"column_end":4}},{"value":"/ ## Use with dynamically sized types","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/transparent.rs","byte_start":72872,"byte_end":72911,"line_start":71,"line_end":71,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/transparent.rs","byte_start":72912,"byte_end":72915,"line_start":72,"line_end":72,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/transparent.rs","byte_start":72916,"byte_end":72923,"line_start":73,"line_end":73,"column_start":1,"column_end":8}},{"value":"/ use bytemuck::TransparentWrapper;","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/transparent.rs","byte_start":72924,"byte_end":72961,"line_start":74,"line_end":74,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/transparent.rs","byte_start":72962,"byte_end":72965,"line_start":75,"line_end":75,"column_start":1,"column_end":4}},{"value":"/ #[repr(transparent)]","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/transparent.rs","byte_start":72966,"byte_end":72990,"line_start":76,"line_end":76,"column_start":1,"column_end":25}},{"value":"/ struct Slice<T>([T]);","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/transparent.rs","byte_start":72991,"byte_end":73016,"line_start":77,"line_end":77,"column_start":1,"column_end":26}},{"value":"/","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/transparent.rs","byte_start":73017,"byte_end":73020,"line_start":78,"line_end":78,"column_start":1,"column_end":4}},{"value":"/ unsafe impl<T> TransparentWrapper<[T]> for Slice<T> {}","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/transparent.rs","byte_start":73021,"byte_end":73079,"line_start":79,"line_end":79,"column_start":1,"column_end":59}},{"value":"/","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/transparent.rs","byte_start":73080,"byte_end":73083,"line_start":80,"line_end":80,"column_start":1,"column_end":4}},{"value":"/ let s = Slice::wrap_ref(&[1u32, 2, 3]);","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/transparent.rs","byte_start":73084,"byte_end":73127,"line_start":81,"line_end":81,"column_start":1,"column_end":44}},{"value":"/ assert_eq!(&s.0, &[1, 2, 3]);","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/transparent.rs","byte_start":73128,"byte_end":73161,"line_start":82,"line_end":82,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/transparent.rs","byte_start":73162,"byte_end":73165,"line_start":83,"line_end":83,"column_start":1,"column_end":4}},{"value":"/ let mut buf = [1, 2, 3u8];","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/transparent.rs","byte_start":73166,"byte_end":73196,"line_start":84,"line_end":84,"column_start":1,"column_end":31}},{"value":"/ let sm = Slice::wrap_mut(&mut buf);","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/transparent.rs","byte_start":73197,"byte_end":73236,"line_start":85,"line_end":85,"column_start":1,"column_end":40}},{"value":"/ ```","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/transparent.rs","byte_start":73237,"byte_end":73244,"line_start":86,"line_end":86,"column_start":1,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":228},"span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/transparent.rs","byte_start":73367,"byte_end":73371,"line_start":90,"line_end":90,"column_start":6,"column_end":10},"name":"wrap","qualname":"::transparent::TransparentWrapper::wrap","value":"pub fn wrap(Inner) -> Self where Self: Sized, Inner: Sized","parent":{"krate":0,"index":226},"children":[],"decl_id":null,"docs":" Convert the inner type into the wrapper type.\n","sig":null,"attributes":[{"value":"/ Convert the inner type into the wrapper type.","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/transparent.rs","byte_start":73300,"byte_end":73349,"line_start":88,"line_end":88,"column_start":3,"column_end":52}},{"value":"inline","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/transparent.rs","byte_start":73352,"byte_end":73361,"line_start":89,"line_end":89,"column_start":3,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":229},"span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/transparent.rs","byte_start":73683,"byte_end":73691,"line_start":103,"line_end":103,"column_start":6,"column_end":14},"name":"wrap_ref","qualname":"::transparent::TransparentWrapper::wrap_ref","value":"pub fn wrap_ref(&Inner) -> &Self","parent":{"krate":0,"index":226},"children":[],"decl_id":null,"docs":" Convert a reference to the inner type into a reference to the wrapper\n type.\n","sig":null,"attributes":[{"value":"/ Convert a reference to the inner type into a reference to the wrapper","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/transparent.rs","byte_start":73580,"byte_end":73653,"line_start":100,"line_end":100,"column_start":3,"column_end":76}},{"value":"/ type.","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/transparent.rs","byte_start":73656,"byte_end":73665,"line_start":101,"line_end":101,"column_start":3,"column_end":12}},{"value":"inline","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/transparent.rs","byte_start":73668,"byte_end":73677,"line_start":102,"line_end":102,"column_start":3,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":230},"span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/transparent.rs","byte_start":74381,"byte_end":74389,"line_start":121,"line_end":121,"column_start":6,"column_end":14},"name":"wrap_mut","qualname":"::transparent::TransparentWrapper::wrap_mut","value":"pub fn wrap_mut(&mut Inner) -> &mut Self","parent":{"krate":0,"index":226},"children":[],"decl_id":null,"docs":" Convert a mutable reference to the inner type into a mutable reference to\n the wrapper type.\n","sig":null,"attributes":[{"value":"/ Convert a mutable reference to the inner type into a mutable reference to","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/transparent.rs","byte_start":74262,"byte_end":74339,"line_start":118,"line_end":118,"column_start":3,"column_end":80}},{"value":"/ the wrapper type.","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/transparent.rs","byte_start":74342,"byte_end":74363,"line_start":119,"line_end":119,"column_start":3,"column_end":24}},{"value":"inline","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/transparent.rs","byte_start":74366,"byte_end":74375,"line_start":120,"line_end":120,"column_start":3,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":231},"span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/transparent.rs","byte_start":75053,"byte_end":75063,"line_start":138,"line_end":138,"column_start":6,"column_end":16},"name":"wrap_slice","qualname":"::transparent::TransparentWrapper::wrap_slice","value":"pub fn wrap_slice(&[Inner]) -> &[Self] where Self: Sized, Inner: Sized","parent":{"krate":0,"index":226},"children":[],"decl_id":null,"docs":" Convert a slice to the inner type into a slice to the wrapper type.\n","sig":null,"attributes":[{"value":"/ Convert a slice to the inner type into a slice to the wrapper type.","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/transparent.rs","byte_start":74964,"byte_end":75035,"line_start":136,"line_end":136,"column_start":3,"column_end":74}},{"value":"inline","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/transparent.rs","byte_start":75038,"byte_end":75047,"line_start":137,"line_end":137,"column_start":3,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":232},"span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/transparent.rs","byte_start":75607,"byte_end":75621,"line_start":155,"line_end":155,"column_start":6,"column_end":20},"name":"wrap_slice_mut","qualname":"::transparent::TransparentWrapper::wrap_slice_mut","value":"pub fn wrap_slice_mut(&mut [Inner]) -> &mut [Self] where Self: Sized,\nInner: Sized","parent":{"krate":0,"index":226},"children":[],"decl_id":null,"docs":" Convert a mutable slice to the inner type into a mutable slice to the\n wrapper type.\n","sig":null,"attributes":[{"value":"/ Convert a mutable slice to the inner type into a mutable slice to the","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/transparent.rs","byte_start":75496,"byte_end":75569,"line_start":152,"line_end":152,"column_start":3,"column_end":76}},{"value":"/ wrapper type.","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/transparent.rs","byte_start":75572,"byte_end":75589,"line_start":153,"line_end":153,"column_start":3,"column_end":20}},{"value":"inline","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/transparent.rs","byte_start":75592,"byte_end":75601,"line_start":154,"line_end":154,"column_start":3,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":233},"span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/transparent.rs","byte_start":76127,"byte_end":76131,"line_start":171,"line_end":171,"column_start":6,"column_end":10},"name":"peel","qualname":"::transparent::TransparentWrapper::peel","value":"pub fn peel(Self) -> Inner where Self: Sized, Inner: Sized","parent":{"krate":0,"index":226},"children":[],"decl_id":null,"docs":" Convert the wrapper type into the inner type.\n","sig":null,"attributes":[{"value":"/ Convert the wrapper type into the inner type.","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/transparent.rs","byte_start":76060,"byte_end":76109,"line_start":169,"line_end":169,"column_start":3,"column_end":52}},{"value":"inline","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/transparent.rs","byte_start":76112,"byte_end":76121,"line_start":170,"line_end":170,"column_start":3,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":234},"span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/transparent.rs","byte_start":76336,"byte_end":76344,"line_start":182,"line_end":182,"column_start":6,"column_end":14},"name":"peel_ref","qualname":"::transparent::TransparentWrapper::peel_ref","value":"pub fn peel_ref(&Self) -> &Inner","parent":{"krate":0,"index":226},"children":[],"decl_id":null,"docs":" Convert a reference to the wrapper type into a reference to the inner\n type.\n","sig":null,"attributes":[{"value":"/ Convert a reference to the wrapper type into a reference to the inner","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/transparent.rs","byte_start":76233,"byte_end":76306,"line_start":179,"line_end":179,"column_start":3,"column_end":76}},{"value":"/ type.","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/transparent.rs","byte_start":76309,"byte_end":76318,"line_start":180,"line_end":180,"column_start":3,"column_end":12}},{"value":"inline","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/transparent.rs","byte_start":76321,"byte_end":76330,"line_start":181,"line_end":181,"column_start":3,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":235},"span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/transparent.rs","byte_start":77034,"byte_end":77042,"line_start":200,"line_end":200,"column_start":6,"column_end":14},"name":"peel_mut","qualname":"::transparent::TransparentWrapper::peel_mut","value":"pub fn peel_mut(&mut Self) -> &mut Inner","parent":{"krate":0,"index":226},"children":[],"decl_id":null,"docs":" Convert a mutable reference to the wrapper type into a mutable reference\n to the inner type.\n","sig":null,"attributes":[{"value":"/ Convert a mutable reference to the wrapper type into a mutable reference","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/transparent.rs","byte_start":76915,"byte_end":76991,"line_start":197,"line_end":197,"column_start":3,"column_end":79}},{"value":"/ to the inner type.","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/transparent.rs","byte_start":76994,"byte_end":77016,"line_start":198,"line_end":198,"column_start":3,"column_end":25}},{"value":"inline","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/transparent.rs","byte_start":77019,"byte_end":77028,"line_start":199,"line_end":199,"column_start":3,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":236},"span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/transparent.rs","byte_start":77706,"byte_end":77716,"line_start":217,"line_end":217,"column_start":6,"column_end":16},"name":"peel_slice","qualname":"::transparent::TransparentWrapper::peel_slice","value":"pub fn peel_slice(&[Self]) -> &[Inner] where Self: Sized, Inner: Sized","parent":{"krate":0,"index":226},"children":[],"decl_id":null,"docs":" Convert a slice to the wrapped type into a slice to the inner type.\n","sig":null,"attributes":[{"value":"/ Convert a slice to the wrapped type into a slice to the inner type.","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/transparent.rs","byte_start":77617,"byte_end":77688,"line_start":215,"line_end":215,"column_start":3,"column_end":74}},{"value":"inline","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/transparent.rs","byte_start":77691,"byte_end":77700,"line_start":216,"line_end":216,"column_start":3,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":237},"span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/transparent.rs","byte_start":78261,"byte_end":78275,"line_start":234,"line_end":234,"column_start":6,"column_end":20},"name":"peel_slice_mut","qualname":"::transparent::TransparentWrapper::peel_slice_mut","value":"pub fn peel_slice_mut(&mut [Self]) -> &mut [Inner] where Self: Sized,\nInner: Sized","parent":{"krate":0,"index":226},"children":[],"decl_id":null,"docs":" Convert a mutable slice to the wrapped type into a mutable slice to the\n inner type.\n","sig":null,"attributes":[{"value":"/ Convert a mutable slice to the wrapped type into a mutable slice to the","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/transparent.rs","byte_start":78150,"byte_end":78225,"line_start":231,"line_end":231,"column_start":3,"column_end":78}},{"value":"/ inner type.","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/transparent.rs","byte_start":78228,"byte_end":78243,"line_start":232,"line_end":232,"column_start":3,"column_end":18}},{"value":"inline","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/transparent.rs","byte_start":78246,"byte_end":78255,"line_start":233,"line_end":233,"column_start":3,"column_end":12}}]},{"kind":"Function","id":{"krate":0,"index":242},"span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/lib.rs","byte_start":4623,"byte_end":4631,"line_start":136,"line_end":136,"column_start":8,"column_end":16},"name":"bytes_of","qualname":"::bytes_of","value":"pub fn bytes_of<T: Pod>(&T) -> &[u8]","parent":null,"children":[],"decl_id":null,"docs":" Re-interprets `&T` as `&[u8]`.","sig":null,"attributes":[{"value":"/ Re-interprets `&T` as `&[u8]`.","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/lib.rs","byte_start":4414,"byte_end":4448,"line_start":131,"line_end":131,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/lib.rs","byte_start":4449,"byte_end":4452,"line_start":132,"line_end":132,"column_start":1,"column_end":4}},{"value":"/ Any ZST becomes an empty slice, and in that case the pointer value of that","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/lib.rs","byte_start":4453,"byte_end":4531,"line_start":133,"line_end":133,"column_start":1,"column_end":79}},{"value":"/ empty slice might not match the pointer value of the input reference.","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/lib.rs","byte_start":4532,"byte_end":4605,"line_start":134,"line_end":134,"column_start":1,"column_end":74}},{"value":"inline","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/lib.rs","byte_start":4606,"byte_end":4615,"line_start":135,"line_end":135,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":244},"span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/lib.rs","byte_start":5046,"byte_end":5058,"line_start":152,"line_end":152,"column_start":8,"column_end":20},"name":"bytes_of_mut","qualname":"::bytes_of_mut","value":"pub fn bytes_of_mut<T: Pod>(&mut T) -> &mut [u8]","parent":null,"children":[],"decl_id":null,"docs":" Re-interprets `&mut T` as `&mut [u8]`.","sig":null,"attributes":[{"value":"/ Re-interprets `&mut T` as `&mut [u8]`.","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/lib.rs","byte_start":4829,"byte_end":4871,"line_start":147,"line_end":147,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/lib.rs","byte_start":4872,"byte_end":4875,"line_start":148,"line_end":148,"column_start":1,"column_end":4}},{"value":"/ Any ZST becomes an empty slice, and in that case the pointer value of that","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/lib.rs","byte_start":4876,"byte_end":4954,"line_start":149,"line_end":149,"column_start":1,"column_end":79}},{"value":"/ empty slice might not match the pointer value of the input reference.","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/lib.rs","byte_start":4955,"byte_end":5028,"line_start":150,"line_end":150,"column_start":1,"column_end":74}},{"value":"inline","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/lib.rs","byte_start":5029,"byte_end":5038,"line_start":151,"line_end":151,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":246},"span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/lib.rs","byte_start":5402,"byte_end":5412,"line_start":169,"line_end":169,"column_start":8,"column_end":18},"name":"from_bytes","qualname":"::from_bytes","value":"pub fn from_bytes<T: Pod>(&[u8]) -> &T","parent":null,"children":[],"decl_id":null,"docs":" Re-interprets `&[u8]` as `&T`.","sig":null,"attributes":[{"value":"/ Re-interprets `&[u8]` as `&T`.","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/lib.rs","byte_start":5272,"byte_end":5306,"line_start":163,"line_end":163,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/lib.rs","byte_start":5307,"byte_end":5310,"line_start":164,"line_end":164,"column_start":1,"column_end":4}},{"value":"/ ## Panics","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/lib.rs","byte_start":5311,"byte_end":5324,"line_start":165,"line_end":165,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/lib.rs","byte_start":5325,"byte_end":5328,"line_start":166,"line_end":166,"column_start":1,"column_end":4}},{"value":"/ This is [`try_from_bytes`] but will panic on error.","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/lib.rs","byte_start":5329,"byte_end":5384,"line_start":167,"line_end":167,"column_start":1,"column_end":56}},{"value":"inline","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/lib.rs","byte_start":5385,"byte_end":5394,"line_start":168,"line_end":168,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":248},"span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/lib.rs","byte_start":5685,"byte_end":5699,"line_start":182,"line_end":182,"column_start":8,"column_end":22},"name":"from_bytes_mut","qualname":"::from_bytes_mut","value":"pub fn from_bytes_mut<T: Pod>(&mut [u8]) -> &mut T","parent":null,"children":[],"decl_id":null,"docs":" Re-interprets `&mut [u8]` as `&mut T`.","sig":null,"attributes":[{"value":"/ Re-interprets `&mut [u8]` as `&mut T`.","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/lib.rs","byte_start":5543,"byte_end":5585,"line_start":176,"line_end":176,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/lib.rs","byte_start":5586,"byte_end":5589,"line_start":177,"line_end":177,"column_start":1,"column_end":4}},{"value":"/ ## Panics","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/lib.rs","byte_start":5590,"byte_end":5603,"line_start":178,"line_end":178,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/lib.rs","byte_start":5604,"byte_end":5607,"line_start":179,"line_end":179,"column_start":1,"column_end":4}},{"value":"/ This is [`try_from_bytes_mut`] but will panic on error.","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/lib.rs","byte_start":5608,"byte_end":5667,"line_start":180,"line_end":180,"column_start":1,"column_end":60}},{"value":"inline","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/lib.rs","byte_start":5668,"byte_end":5677,"line_start":181,"line_end":181,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":250},"span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/lib.rs","byte_start":5992,"byte_end":6014,"line_start":194,"line_end":194,"column_start":8,"column_end":30},"name":"try_pod_read_unaligned","qualname":"::try_pod_read_unaligned","value":"pub fn try_pod_read_unaligned<T: Pod>(&[u8]) -> Result<T, PodCastError>","parent":null,"children":[],"decl_id":null,"docs":" Reads from the bytes as if they were a `T`.","sig":null,"attributes":[{"value":"/ Reads from the bytes as if they were a `T`.","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/lib.rs","byte_start":5846,"byte_end":5893,"line_start":189,"line_end":189,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/lib.rs","byte_start":5894,"byte_end":5897,"line_start":190,"line_end":190,"column_start":1,"column_end":4}},{"value":"/ ## Failure","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/lib.rs","byte_start":5898,"byte_end":5912,"line_start":191,"line_end":191,"column_start":1,"column_end":15}},{"value":"/ * If the `bytes` length is not equal to `size_of::<T>()`.","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/lib.rs","byte_start":5913,"byte_end":5974,"line_start":192,"line_end":192,"column_start":1,"column_end":62}},{"value":"inline","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/lib.rs","byte_start":5975,"byte_end":5984,"line_start":193,"line_end":193,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":252},"span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/lib.rs","byte_start":6366,"byte_end":6384,"line_start":207,"line_end":207,"column_start":8,"column_end":26},"name":"pod_read_unaligned","qualname":"::pod_read_unaligned","value":"pub fn pod_read_unaligned<T: Pod>(&[u8]) -> T","parent":null,"children":[],"decl_id":null,"docs":" Reads the slice into a `T` value.","sig":null,"attributes":[{"value":"/ Reads the slice into a `T` value.","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/lib.rs","byte_start":6222,"byte_end":6259,"line_start":202,"line_end":202,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/lib.rs","byte_start":6260,"byte_end":6263,"line_start":203,"line_end":203,"column_start":1,"column_end":4}},{"value":"/ ## Panics","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/lib.rs","byte_start":6264,"byte_end":6277,"line_start":204,"line_end":204,"column_start":1,"column_end":14}},{"value":"/ * This is like `try_pod_read_unaligned` but will panic on failure.","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/lib.rs","byte_start":6278,"byte_end":6348,"line_start":205,"line_end":205,"column_start":1,"column_end":71}},{"value":"inline","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/lib.rs","byte_start":6349,"byte_end":6358,"line_start":206,"line_end":206,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":254},"span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/lib.rs","byte_start":6732,"byte_end":6746,"line_start":221,"line_end":221,"column_start":8,"column_end":22},"name":"try_from_bytes","qualname":"::try_from_bytes","value":"pub fn try_from_bytes<T: Pod>(&[u8]) -> Result<&T, PodCastError>","parent":null,"children":[],"decl_id":null,"docs":" Re-interprets `&[u8]` as `&T`.","sig":null,"attributes":[{"value":"/ Re-interprets `&[u8]` as `&T`.","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/lib.rs","byte_start":6538,"byte_end":6572,"line_start":214,"line_end":214,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/lib.rs","byte_start":6573,"byte_end":6576,"line_start":215,"line_end":215,"column_start":1,"column_end":4}},{"value":"/ ## Failure","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/lib.rs","byte_start":6577,"byte_end":6591,"line_start":216,"line_end":216,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/lib.rs","byte_start":6592,"byte_end":6595,"line_start":217,"line_end":217,"column_start":1,"column_end":4}},{"value":"/ * If the slice isn't aligned for the new type","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/lib.rs","byte_start":6596,"byte_end":6645,"line_start":218,"line_end":218,"column_start":1,"column_end":50}},{"value":"/ * If the slice's length isn’t exactly the size of the new type","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/lib.rs","byte_start":6646,"byte_end":6714,"line_start":219,"line_end":219,"column_start":1,"column_end":67}},{"value":"inline","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/lib.rs","byte_start":6715,"byte_end":6724,"line_start":220,"line_end":220,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":256},"span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/lib.rs","byte_start":7253,"byte_end":7271,"line_start":238,"line_end":238,"column_start":8,"column_end":26},"name":"try_from_bytes_mut","qualname":"::try_from_bytes_mut","value":"pub fn try_from_bytes_mut<T: Pod>(&mut [u8]) -> Result<&mut T, PodCastError>","parent":null,"children":[],"decl_id":null,"docs":" Re-interprets `&mut [u8]` as `&mut T`.","sig":null,"attributes":[{"value":"/ Re-interprets `&mut [u8]` as `&mut T`.","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/lib.rs","byte_start":7051,"byte_end":7093,"line_start":231,"line_end":231,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/lib.rs","byte_start":7094,"byte_end":7097,"line_start":232,"line_end":232,"column_start":1,"column_end":4}},{"value":"/ ## Failure","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/lib.rs","byte_start":7098,"byte_end":7112,"line_start":233,"line_end":233,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/lib.rs","byte_start":7113,"byte_end":7116,"line_start":234,"line_end":234,"column_start":1,"column_end":4}},{"value":"/ * If the slice isn't aligned for the new type","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/lib.rs","byte_start":7117,"byte_end":7166,"line_start":235,"line_end":235,"column_start":1,"column_end":50}},{"value":"/ * If the slice's length isn’t exactly the size of the new type","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/lib.rs","byte_start":7167,"byte_end":7235,"line_start":236,"line_end":236,"column_start":1,"column_end":67}},{"value":"inline","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/lib.rs","byte_start":7236,"byte_end":7245,"line_start":237,"line_end":237,"column_start":1,"column_end":10}}]},{"kind":"TupleVariant","id":{"krate":0,"index":627},"span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/lib.rs","byte_start":7869,"byte_end":7909,"line_start":255,"line_end":255,"column_start":3,"column_end":43},"name":"TargetAlignmentGreaterAndInputNotAligned","qualname":"::PodCastError::TargetAlignmentGreaterAndInputNotAligned","value":"PodCastError::TargetAlignmentGreaterAndInputNotAligned","parent":{"krate":0,"index":626},"children":[],"decl_id":null,"docs":" You tried to cast a slice to an element type with a higher alignment\n requirement but the slice wasn't aligned.\n","sig":null,"attributes":[{"value":"/ You tried to cast a slice to an element type with a higher alignment","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/lib.rs","byte_start":7746,"byte_end":7818,"line_start":253,"line_end":253,"column_start":3,"column_end":75}},{"value":"/ requirement but the slice wasn't aligned.","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/lib.rs","byte_start":7821,"byte_end":7866,"line_start":254,"line_end":254,"column_start":3,"column_end":48}}]},{"kind":"TupleVariant","id":{"krate":0,"index":629},"span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/lib.rs","byte_start":8095,"byte_end":8119,"line_start":259,"line_end":259,"column_start":3,"column_end":27},"name":"OutputSliceWouldHaveSlop","qualname":"::PodCastError::OutputSliceWouldHaveSlop","value":"PodCastError::OutputSliceWouldHaveSlop","parent":{"krate":0,"index":626},"children":[],"decl_id":null,"docs":" If the element size changes then the output slice changes length\n accordingly. If the output slice wouldn't be a whole number of elements\n then the conversion fails.\n","sig":null,"attributes":[{"value":"/ If the element size changes then the output slice changes length","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/lib.rs","byte_start":7913,"byte_end":7981,"line_start":256,"line_end":256,"column_start":3,"column_end":71}},{"value":"/ accordingly. If the output slice wouldn't be a whole number of elements","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/lib.rs","byte_start":7984,"byte_end":8059,"line_start":257,"line_end":257,"column_start":3,"column_end":78}},{"value":"/ then the conversion fails.","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/lib.rs","byte_start":8062,"byte_end":8092,"line_start":258,"line_end":258,"column_start":3,"column_end":33}}]},{"kind":"TupleVariant","id":{"krate":0,"index":631},"span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/lib.rs","byte_start":8340,"byte_end":8352,"line_start":263,"line_end":263,"column_start":3,"column_end":15},"name":"SizeMismatch","qualname":"::PodCastError::SizeMismatch","value":"PodCastError::SizeMismatch","parent":{"krate":0,"index":626},"children":[],"decl_id":null,"docs":" When casting a slice you can't convert between ZST elements and non-ZST\n elements. When casting an individual `T`, `&T`, or `&mut T` value the\n source size and destination size must be an exact match.\n","sig":null,"attributes":[{"value":"/ When casting a slice you can't convert between ZST elements and non-ZST","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/lib.rs","byte_start":8123,"byte_end":8198,"line_start":260,"line_end":260,"column_start":3,"column_end":78}},{"value":"/ elements. When casting an individual `T`, `&T`, or `&mut T` value the","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/lib.rs","byte_start":8201,"byte_end":8274,"line_start":261,"line_end":261,"column_start":3,"column_end":76}},{"value":"/ source size and destination size must be an exact match.","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/lib.rs","byte_start":8277,"byte_end":8337,"line_start":262,"line_end":262,"column_start":3,"column_end":63}}]},{"kind":"TupleVariant","id":{"krate":0,"index":633},"span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/lib.rs","byte_start":8643,"byte_end":8660,"line_start":270,"line_end":270,"column_start":3,"column_end":20},"name":"AlignmentMismatch","qualname":"::PodCastError::AlignmentMismatch","value":"PodCastError::AlignmentMismatch","parent":{"krate":0,"index":626},"children":[],"decl_id":null,"docs":" For this type of cast the alignments must be exactly the same and they\n were not so now you're sad.","sig":null,"attributes":[{"value":"/ For this type of cast the alignments must be exactly the same and they","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/lib.rs","byte_start":8356,"byte_end":8430,"line_start":264,"line_end":264,"column_start":3,"column_end":77}},{"value":"/ were not so now you're sad.","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/lib.rs","byte_start":8433,"byte_end":8464,"line_start":265,"line_end":265,"column_start":3,"column_end":34}},{"value":"/","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/lib.rs","byte_start":8467,"byte_end":8470,"line_start":266,"line_end":266,"column_start":3,"column_end":6}},{"value":"/ This error is generated **only** by operations that cast allocated types","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/lib.rs","byte_start":8473,"byte_end":8549,"line_start":267,"line_end":267,"column_start":3,"column_end":79}},{"value":"/ (such as `Box` and `Vec`), because in that case the alignment must stay","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/lib.rs","byte_start":8552,"byte_end":8627,"line_start":268,"line_end":268,"column_start":3,"column_end":78}},{"value":"/ exact.","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/lib.rs","byte_start":8630,"byte_end":8640,"line_start":269,"line_end":269,"column_start":3,"column_end":13}}]},{"kind":"Enum","id":{"krate":0,"index":626},"span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/lib.rs","byte_start":7729,"byte_end":7741,"line_start":252,"line_end":252,"column_start":10,"column_end":22},"name":"PodCastError","qualname":"::PodCastError","value":"pub enum PodCastError {\n    TargetAlignmentGreaterAndInputNotAligned,\n    OutputSliceWouldHaveSlop,\n    SizeMismatch,\n    AlignmentMismatch,\n}","parent":null,"children":[{"krate":0,"index":627},{"krate":0,"index":629},{"krate":0,"index":631},{"krate":0,"index":633}],"decl_id":null,"docs":" The things that can go wrong when casting between [`Pod`] data forms.\n","sig":null,"attributes":[{"value":"/ The things that can go wrong when casting between [`Pod`] data forms.","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/lib.rs","byte_start":7595,"byte_end":7668,"line_start":250,"line_end":250,"column_start":1,"column_end":74}}]},{"kind":"Function","id":{"krate":0,"index":260},"span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/lib.rs","byte_start":9065,"byte_end":9069,"line_start":287,"line_end":287,"column_start":8,"column_end":12},"name":"cast","qualname":"::cast","value":"pub fn cast<A: Pod, B: Pod>(A) -> B","parent":null,"children":[],"decl_id":null,"docs":" Cast `T` into `U`","sig":null,"attributes":[{"value":"/ Cast `T` into `U`","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/lib.rs","byte_start":8926,"byte_end":8947,"line_start":281,"line_end":281,"column_start":1,"column_end":22}},{"value":"/","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/lib.rs","byte_start":8948,"byte_end":8951,"line_start":282,"line_end":282,"column_start":1,"column_end":4}},{"value":"/ ## Panics","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/lib.rs","byte_start":8952,"byte_end":8965,"line_start":283,"line_end":283,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/lib.rs","byte_start":8966,"byte_end":8969,"line_start":284,"line_end":284,"column_start":1,"column_end":4}},{"value":"/ * This is like [`try_cast`](try_cast), but will panic on a size mismatch.","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/lib.rs","byte_start":8970,"byte_end":9047,"line_start":285,"line_end":285,"column_start":1,"column_end":78}},{"value":"inline","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/lib.rs","byte_start":9048,"byte_end":9057,"line_start":286,"line_end":286,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":263},"span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/lib.rs","byte_start":9373,"byte_end":9381,"line_start":301,"line_end":301,"column_start":8,"column_end":16},"name":"cast_mut","qualname":"::cast_mut","value":"pub fn cast_mut<A: Pod, B: Pod>(&mut A) -> &mut B","parent":null,"children":[],"decl_id":null,"docs":" Cast `&mut T` into `&mut U`.","sig":null,"attributes":[{"value":"/ Cast `&mut T` into `&mut U`.","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/lib.rs","byte_start":9247,"byte_end":9279,"line_start":295,"line_end":295,"column_start":1,"column_end":33}},{"value":"/","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/lib.rs","byte_start":9280,"byte_end":9283,"line_start":296,"line_end":296,"column_start":1,"column_end":4}},{"value":"/ ## Panics","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/lib.rs","byte_start":9284,"byte_end":9297,"line_start":297,"line_end":297,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/lib.rs","byte_start":9298,"byte_end":9301,"line_start":298,"line_end":298,"column_start":1,"column_end":4}},{"value":"/ This is [`try_cast_mut`] but will panic on error.","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/lib.rs","byte_start":9302,"byte_end":9355,"line_start":299,"line_end":299,"column_start":1,"column_end":54}},{"value":"inline","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/lib.rs","byte_start":9356,"byte_end":9365,"line_start":300,"line_end":300,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":266},"span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/lib.rs","byte_start":9901,"byte_end":9909,"line_start":322,"line_end":322,"column_start":8,"column_end":16},"name":"cast_ref","qualname":"::cast_ref","value":"pub fn cast_ref<A: Pod, B: Pod>(&A) -> &B","parent":null,"children":[],"decl_id":null,"docs":" Cast `&T` into `&U`.","sig":null,"attributes":[{"value":"/ Cast `&T` into `&U`.","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/lib.rs","byte_start":9783,"byte_end":9807,"line_start":316,"line_end":316,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/lib.rs","byte_start":9808,"byte_end":9811,"line_start":317,"line_end":317,"column_start":1,"column_end":4}},{"value":"/ ## Panics","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/lib.rs","byte_start":9812,"byte_end":9825,"line_start":318,"line_end":318,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/lib.rs","byte_start":9826,"byte_end":9829,"line_start":319,"line_end":319,"column_start":1,"column_end":4}},{"value":"/ This is [`try_cast_ref`] but will panic on error.","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/lib.rs","byte_start":9830,"byte_end":9883,"line_start":320,"line_end":320,"column_start":1,"column_end":54}},{"value":"inline","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/lib.rs","byte_start":9884,"byte_end":9893,"line_start":321,"line_end":321,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":269},"span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/lib.rs","byte_start":10427,"byte_end":10437,"line_start":343,"line_end":343,"column_start":8,"column_end":18},"name":"cast_slice","qualname":"::cast_slice","value":"pub fn cast_slice<A: Pod, B: Pod>(&[A]) -> &[B]","parent":null,"children":[],"decl_id":null,"docs":" Cast `&[A]` into `&[B]`.","sig":null,"attributes":[{"value":"/ Cast `&[A]` into `&[B]`.","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/lib.rs","byte_start":10303,"byte_end":10331,"line_start":337,"line_end":337,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/lib.rs","byte_start":10332,"byte_end":10335,"line_start":338,"line_end":338,"column_start":1,"column_end":4}},{"value":"/ ## Panics","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/lib.rs","byte_start":10336,"byte_end":10349,"line_start":339,"line_end":339,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/lib.rs","byte_start":10350,"byte_end":10353,"line_start":340,"line_end":340,"column_start":1,"column_end":4}},{"value":"/ This is [`try_cast_slice`] but will panic on error.","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/lib.rs","byte_start":10354,"byte_end":10409,"line_start":341,"line_end":341,"column_start":1,"column_end":56}},{"value":"inline","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/lib.rs","byte_start":10410,"byte_end":10419,"line_start":342,"line_end":342,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":272},"span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/lib.rs","byte_start":10713,"byte_end":10727,"line_start":356,"line_end":356,"column_start":8,"column_end":22},"name":"cast_slice_mut","qualname":"::cast_slice_mut","value":"pub fn cast_slice_mut<A: Pod, B: Pod>(&mut [A]) -> &mut [B]","parent":null,"children":[],"decl_id":null,"docs":" Cast `&mut [T]` into `&mut [U]`.","sig":null,"attributes":[{"value":"/ Cast `&mut [T]` into `&mut [U]`.","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/lib.rs","byte_start":10577,"byte_end":10613,"line_start":350,"line_end":350,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/lib.rs","byte_start":10614,"byte_end":10617,"line_start":351,"line_end":351,"column_start":1,"column_end":4}},{"value":"/ ## Panics","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/lib.rs","byte_start":10618,"byte_end":10631,"line_start":352,"line_end":352,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/lib.rs","byte_start":10632,"byte_end":10635,"line_start":353,"line_end":353,"column_start":1,"column_end":4}},{"value":"/ This is [`try_cast_slice_mut`] but will panic on error.","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/lib.rs","byte_start":10636,"byte_end":10695,"line_start":354,"line_end":354,"column_start":1,"column_end":60}},{"value":"inline","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/lib.rs","byte_start":10696,"byte_end":10705,"line_start":355,"line_end":355,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":275},"span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/lib.rs","byte_start":10958,"byte_end":10970,"line_start":365,"line_end":365,"column_start":8,"column_end":20},"name":"pod_align_to","qualname":"::pod_align_to","value":"pub fn pod_align_to<T: Pod, U: Pod>(&[T]) -> (&[T], &[U], &[T])","parent":null,"children":[],"decl_id":null,"docs":" As `align_to`, but safe because of the [`Pod`] bound.\n","sig":null,"attributes":[{"value":"/ As `align_to`, but safe because of the [`Pod`] bound.","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/lib.rs","byte_start":10883,"byte_end":10940,"line_start":363,"line_end":363,"column_start":1,"column_end":58}},{"value":"inline","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/lib.rs","byte_start":10941,"byte_end":10950,"line_start":364,"line_end":364,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":278},"span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/lib.rs","byte_start":11139,"byte_end":11155,"line_start":371,"line_end":371,"column_start":8,"column_end":24},"name":"pod_align_to_mut","qualname":"::pod_align_to_mut","value":"pub fn pod_align_to_mut<T: Pod, U: Pod>(&mut [T])\n-> (&mut [T], &mut [U], &mut [T])","parent":null,"children":[],"decl_id":null,"docs":" As `align_to_mut`, but safe because of the [`Pod`] bound.\n","sig":null,"attributes":[{"value":"/ As `align_to_mut`, but safe because of the [`Pod`] bound.","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/lib.rs","byte_start":11060,"byte_end":11121,"line_start":369,"line_end":369,"column_start":1,"column_end":62}},{"value":"inline","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/lib.rs","byte_start":11122,"byte_end":11131,"line_start":370,"line_end":370,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":281},"span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/lib.rs","byte_start":11657,"byte_end":11665,"line_start":388,"line_end":388,"column_start":8,"column_end":16},"name":"try_cast","qualname":"::try_cast","value":"pub fn try_cast<A: Pod, B: Pod>(A) -> Result<B, PodCastError>","parent":null,"children":[],"decl_id":null,"docs":" Try to cast `T` into `U`.","sig":null,"attributes":[{"value":"/ Try to cast `T` into `U`.","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/lib.rs","byte_start":11270,"byte_end":11299,"line_start":377,"line_end":377,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/lib.rs","byte_start":11300,"byte_end":11303,"line_start":378,"line_end":378,"column_start":1,"column_end":4}},{"value":"/ Note that for this particular type of cast, alignment isn't a factor. The","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/lib.rs","byte_start":11304,"byte_end":11381,"line_start":379,"line_end":379,"column_start":1,"column_end":78}},{"value":"/ input value is semantically copied into the function and then returned to a","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/lib.rs","byte_start":11382,"byte_end":11461,"line_start":380,"line_end":380,"column_start":1,"column_end":80}},{"value":"/ new memory location which will have whatever the required alignment of the","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/lib.rs","byte_start":11462,"byte_end":11540,"line_start":381,"line_end":381,"column_start":1,"column_end":79}},{"value":"/ output type is.","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/lib.rs","byte_start":11541,"byte_end":11560,"line_start":382,"line_end":382,"column_start":1,"column_end":20}},{"value":"/","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/lib.rs","byte_start":11561,"byte_end":11564,"line_start":383,"line_end":383,"column_start":1,"column_end":4}},{"value":"/ ## Failure","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/lib.rs","byte_start":11565,"byte_end":11579,"line_start":384,"line_end":384,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/lib.rs","byte_start":11580,"byte_end":11583,"line_start":385,"line_end":385,"column_start":1,"column_end":4}},{"value":"/ * If the types don't have the same size this fails.","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/lib.rs","byte_start":11584,"byte_end":11639,"line_start":386,"line_end":386,"column_start":1,"column_end":56}},{"value":"inline","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/lib.rs","byte_start":11640,"byte_end":11649,"line_start":387,"line_end":387,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":284},"span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/lib.rs","byte_start":12037,"byte_end":12049,"line_start":403,"line_end":403,"column_start":8,"column_end":20},"name":"try_cast_ref","qualname":"::try_cast_ref","value":"pub fn try_cast_ref<A: Pod, B: Pod>(&A) -> Result<&B, PodCastError>","parent":null,"children":[],"decl_id":null,"docs":" Try to convert a `&T` into `&U`.","sig":null,"attributes":[{"value":"/ Try to convert a `&T` into `&U`.","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/lib.rs","byte_start":11844,"byte_end":11880,"line_start":396,"line_end":396,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/lib.rs","byte_start":11881,"byte_end":11884,"line_start":397,"line_end":397,"column_start":1,"column_end":4}},{"value":"/ ## Failure","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/lib.rs","byte_start":11885,"byte_end":11899,"line_start":398,"line_end":398,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/lib.rs","byte_start":11900,"byte_end":11903,"line_start":399,"line_end":399,"column_start":1,"column_end":4}},{"value":"/ * If the reference isn't aligned in the new type","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/lib.rs","byte_start":11904,"byte_end":11956,"line_start":400,"line_end":400,"column_start":1,"column_end":53}},{"value":"/ * If the source type and target type aren't the same size.","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/lib.rs","byte_start":11957,"byte_end":12019,"line_start":401,"line_end":401,"column_start":1,"column_end":63}},{"value":"inline","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/lib.rs","byte_start":12020,"byte_end":12029,"line_start":402,"line_end":402,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":287},"span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/lib.rs","byte_start":12627,"byte_end":12639,"line_start":421,"line_end":421,"column_start":8,"column_end":20},"name":"try_cast_mut","qualname":"::try_cast_mut","value":"pub fn try_cast_mut<A: Pod, B: Pod>(&mut A) -> Result<&mut B, PodCastError>","parent":null,"children":[],"decl_id":null,"docs":" Try to convert a `&mut T` into `&mut U`.","sig":null,"attributes":[{"value":"/ Try to convert a `&mut T` into `&mut U`.","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/lib.rs","byte_start":12525,"byte_end":12569,"line_start":417,"line_end":417,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/lib.rs","byte_start":12570,"byte_end":12573,"line_start":418,"line_end":418,"column_start":1,"column_end":4}},{"value":"/ As [`try_cast_ref`], but `mut`.","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/lib.rs","byte_start":12574,"byte_end":12609,"line_start":419,"line_end":419,"column_start":1,"column_end":36}},{"value":"inline","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/lib.rs","byte_start":12610,"byte_end":12619,"line_start":420,"line_end":420,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":290},"span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/lib.rs","byte_start":13879,"byte_end":13893,"line_start":451,"line_end":451,"column_start":8,"column_end":22},"name":"try_cast_slice","qualname":"::try_cast_slice","value":"pub fn try_cast_slice<A: Pod, B: Pod>(&[A]) -> Result<&[B], PodCastError>","parent":null,"children":[],"decl_id":null,"docs":" Try to convert `&[A]` into `&[B]` (possibly with a change in length).","sig":null,"attributes":[{"value":"/ Try to convert `&[A]` into `&[B]` (possibly with a change in length).","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/lib.rs","byte_start":13121,"byte_end":13194,"line_start":435,"line_end":435,"column_start":1,"column_end":74}},{"value":"/","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/lib.rs","byte_start":13195,"byte_end":13198,"line_start":436,"line_end":436,"column_start":1,"column_end":4}},{"value":"/ * `input.as_ptr() as usize == output.as_ptr() as usize`","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/lib.rs","byte_start":13199,"byte_end":13258,"line_start":437,"line_end":437,"column_start":1,"column_end":60}},{"value":"/ * `input.len() * size_of::<A>() == output.len() * size_of::<B>()`","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/lib.rs","byte_start":13259,"byte_end":13328,"line_start":438,"line_end":438,"column_start":1,"column_end":70}},{"value":"/","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/lib.rs","byte_start":13329,"byte_end":13332,"line_start":439,"line_end":439,"column_start":1,"column_end":4}},{"value":"/ ## Failure","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/lib.rs","byte_start":13333,"byte_end":13347,"line_start":440,"line_end":440,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/lib.rs","byte_start":13348,"byte_end":13351,"line_start":441,"line_end":441,"column_start":1,"column_end":4}},{"value":"/ * If the target type has a greater alignment requirement and the input slice","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/lib.rs","byte_start":13352,"byte_end":13432,"line_start":442,"line_end":442,"column_start":1,"column_end":81}},{"value":"/   isn't aligned.","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/lib.rs","byte_start":13433,"byte_end":13453,"line_start":443,"line_end":443,"column_start":1,"column_end":21}},{"value":"/ * If the target element type is a different size from the current element","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/lib.rs","byte_start":13454,"byte_end":13531,"line_start":444,"line_end":444,"column_start":1,"column_end":78}},{"value":"/   type, and the output slice wouldn't be a whole number of elements when","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/lib.rs","byte_start":13532,"byte_end":13608,"line_start":445,"line_end":445,"column_start":1,"column_end":77}},{"value":"/   accounting for the size change (eg: 3 `u16` values is 1.5 `u32` values, so","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/lib.rs","byte_start":13609,"byte_end":13689,"line_start":446,"line_end":446,"column_start":1,"column_end":81}},{"value":"/   that's a failure).","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/lib.rs","byte_start":13690,"byte_end":13714,"line_start":447,"line_end":447,"column_start":1,"column_end":25}},{"value":"/ * Similarly, you can't convert between a [ZST](https://doc.rust-lang.org/nomicon/exotic-sizes.html#zero-sized-types-zsts)","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/lib.rs","byte_start":13715,"byte_end":13840,"line_start":448,"line_end":448,"column_start":1,"column_end":126}},{"value":"/   and a non-ZST.","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/lib.rs","byte_start":13841,"byte_end":13861,"line_start":449,"line_end":449,"column_start":1,"column_end":21}},{"value":"inline","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/lib.rs","byte_start":13862,"byte_end":13871,"line_start":450,"line_end":450,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":293},"span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/lib.rs","byte_start":14856,"byte_end":14874,"line_start":475,"line_end":475,"column_start":8,"column_end":26},"name":"try_cast_slice_mut","qualname":"::try_cast_slice_mut","value":"pub fn try_cast_slice_mut<A: Pod, B: Pod>(&mut [A])\n-> Result<&mut [B], PodCastError>","parent":null,"children":[],"decl_id":null,"docs":" Try to convert `&mut [A]` into `&mut [B]` (possibly with a change in\n length).","sig":null,"attributes":[{"value":"/ Try to convert `&mut [A]` into `&mut [B]` (possibly with a change in","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/lib.rs","byte_start":14710,"byte_end":14782,"line_start":470,"line_end":470,"column_start":1,"column_end":73}},{"value":"/ length).","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/lib.rs","byte_start":14783,"byte_end":14795,"line_start":471,"line_end":471,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/lib.rs","byte_start":14796,"byte_end":14799,"line_start":472,"line_end":472,"column_start":1,"column_end":4}},{"value":"/ As [`try_cast_slice`], but `&mut`.","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/lib.rs","byte_start":14800,"byte_end":14838,"line_start":473,"line_end":473,"column_start":1,"column_end":39}},{"value":"inline","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/lib.rs","byte_start":14839,"byte_end":14848,"line_start":474,"line_end":474,"column_start":1,"column_end":10}}]}],"impls":[{"id":16,"kind":"Direct","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/zeroable.rs","byte_start":25712,"byte_end":25720,"line_start":43,"line_end":43,"column_start":39,"column_end":47},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":17,"kind":"Direct","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/zeroable.rs","byte_start":25753,"byte_end":25759,"line_start":45,"line_end":45,"column_start":26,"column_end":32},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":18,"kind":"Direct","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/zeroable.rs","byte_start":25799,"byte_end":25805,"line_start":46,"line_end":46,"column_start":26,"column_end":32},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":19,"kind":"Direct","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/zeroable.rs","byte_start":25846,"byte_end":25852,"line_start":47,"line_end":47,"column_start":26,"column_end":32},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":20,"kind":"Direct","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/zeroable.rs","byte_start":25893,"byte_end":25899,"line_start":48,"line_end":48,"column_start":26,"column_end":32},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":21,"kind":"Direct","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/zeroable.rs","byte_start":25940,"byte_end":25946,"line_start":49,"line_end":49,"column_start":26,"column_end":32},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":22,"kind":"Direct","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/zeroable.rs","byte_start":25988,"byte_end":25994,"line_start":50,"line_end":50,"column_start":26,"column_end":32},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":23,"kind":"Direct","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/zeroable.rs","byte_start":26037,"byte_end":26043,"line_start":51,"line_end":51,"column_start":26,"column_end":32},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":24,"kind":"Direct","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/zeroable.rs","byte_start":26083,"byte_end":26089,"line_start":52,"line_end":52,"column_start":26,"column_end":32},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":25,"kind":"Direct","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/zeroable.rs","byte_start":26130,"byte_end":26136,"line_start":53,"line_end":53,"column_start":26,"column_end":32},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":26,"kind":"Direct","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/zeroable.rs","byte_start":26177,"byte_end":26183,"line_start":54,"line_end":54,"column_start":26,"column_end":32},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":27,"kind":"Direct","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/zeroable.rs","byte_start":26224,"byte_end":26230,"line_start":55,"line_end":55,"column_start":26,"column_end":32},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":28,"kind":"Direct","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/zeroable.rs","byte_start":26272,"byte_end":26278,"line_start":56,"line_end":56,"column_start":26,"column_end":32},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":29,"kind":"Direct","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/zeroable.rs","byte_start":26403,"byte_end":26409,"line_start":60,"line_end":60,"column_start":29,"column_end":35},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":30,"kind":"Direct","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/zeroable.rs","byte_start":26463,"byte_end":26474,"line_start":61,"line_end":61,"column_start":39,"column_end":50},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":31,"kind":"Direct","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/zeroable.rs","byte_start":26506,"byte_end":26519,"line_start":62,"line_end":62,"column_start":26,"column_end":39},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":32,"kind":"Direct","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/zeroable.rs","byte_start":26561,"byte_end":26573,"line_start":63,"line_end":63,"column_start":39,"column_end":51},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":33,"kind":"Direct","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/zeroable.rs","byte_start":40223,"byte_end":40230,"line_start":349,"line_end":349,"column_start":34,"column_end":41},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":34,"kind":"Direct","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/zeroable.rs","byte_start":40298,"byte_end":40304,"line_start":351,"line_end":351,"column_start":34,"column_end":40},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":35,"kind":"Direct","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/zeroable.rs","byte_start":40372,"byte_end":40379,"line_start":353,"line_end":353,"column_start":34,"column_end":41},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":36,"kind":"Direct","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/zeroable.rs","byte_start":40447,"byte_end":40454,"line_start":355,"line_end":355,"column_start":34,"column_end":41},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":37,"kind":"Direct","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/zeroable.rs","byte_start":40522,"byte_end":40528,"line_start":357,"line_end":357,"column_start":34,"column_end":40},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":38,"kind":"Direct","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/zeroable.rs","byte_start":40596,"byte_end":40603,"line_start":359,"line_end":359,"column_start":34,"column_end":41},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":53,"kind":"Direct","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/pod.rs","byte_start":42978,"byte_end":42986,"line_start":46,"line_end":46,"column_start":29,"column_end":37},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":54,"kind":"Direct","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/pod.rs","byte_start":43014,"byte_end":43020,"line_start":48,"line_end":48,"column_start":21,"column_end":27},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":55,"kind":"Direct","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/pod.rs","byte_start":43055,"byte_end":43061,"line_start":49,"line_end":49,"column_start":21,"column_end":27},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":56,"kind":"Direct","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/pod.rs","byte_start":43097,"byte_end":43103,"line_start":50,"line_end":50,"column_start":21,"column_end":27},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":57,"kind":"Direct","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/pod.rs","byte_start":43139,"byte_end":43145,"line_start":51,"line_end":51,"column_start":21,"column_end":27},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":58,"kind":"Direct","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/pod.rs","byte_start":43181,"byte_end":43187,"line_start":52,"line_end":52,"column_start":21,"column_end":27},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":59,"kind":"Direct","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/pod.rs","byte_start":43224,"byte_end":43230,"line_start":53,"line_end":53,"column_start":21,"column_end":27},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":60,"kind":"Direct","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/pod.rs","byte_start":43268,"byte_end":43274,"line_start":54,"line_end":54,"column_start":21,"column_end":27},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":61,"kind":"Direct","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/pod.rs","byte_start":43309,"byte_end":43315,"line_start":55,"line_end":55,"column_start":21,"column_end":27},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":62,"kind":"Direct","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/pod.rs","byte_start":43351,"byte_end":43357,"line_start":56,"line_end":56,"column_start":21,"column_end":27},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":63,"kind":"Direct","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/pod.rs","byte_start":43393,"byte_end":43399,"line_start":57,"line_end":57,"column_start":21,"column_end":27},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":64,"kind":"Direct","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/pod.rs","byte_start":43435,"byte_end":43441,"line_start":58,"line_end":58,"column_start":21,"column_end":27},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":65,"kind":"Direct","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/pod.rs","byte_start":43478,"byte_end":43484,"line_start":59,"line_end":59,"column_start":21,"column_end":27},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":66,"kind":"Direct","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/pod.rs","byte_start":43795,"byte_end":43806,"line_start":68,"line_end":68,"column_start":29,"column_end":40},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":67,"kind":"Direct","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/pod.rs","byte_start":43833,"byte_end":43846,"line_start":69,"line_end":69,"column_start":21,"column_end":34},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":68,"kind":"Direct","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/pod.rs","byte_start":43878,"byte_end":43890,"line_start":70,"line_end":70,"column_start":29,"column_end":41},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":69,"kind":"Direct","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/pod.rs","byte_start":55997,"byte_end":56004,"line_start":310,"line_end":310,"column_start":29,"column_end":36},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":70,"kind":"Direct","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/pod.rs","byte_start":56067,"byte_end":56073,"line_start":312,"line_end":312,"column_start":29,"column_end":35},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":71,"kind":"Direct","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/pod.rs","byte_start":56136,"byte_end":56143,"line_start":314,"line_end":314,"column_start":29,"column_end":36},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":72,"kind":"Direct","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/pod.rs","byte_start":56206,"byte_end":56213,"line_start":316,"line_end":316,"column_start":29,"column_end":36},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":73,"kind":"Direct","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/pod.rs","byte_start":56276,"byte_end":56282,"line_start":318,"line_end":318,"column_start":29,"column_end":35},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":74,"kind":"Direct","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/pod.rs","byte_start":56345,"byte_end":56352,"line_start":320,"line_end":320,"column_start":29,"column_end":36},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":94,"kind":"Direct","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/transparent.rs","byte_start":78767,"byte_end":78775,"line_start":249,"line_end":249,"column_start":53,"column_end":61},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":95,"kind":"Direct","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/lib.rs","byte_start":8727,"byte_end":8739,"line_start":273,"line_end":273,"column_start":29,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":259}],"docs":"","sig":null,"attributes":[]}],"refs":[{"kind":"Mod","span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/lib.rs","byte_start":2703,"byte_end":2713,"line_start":79,"line_end":79,"column_start":9,"column_end":19},"ref_id":{"krate":0,"index":18}}],"macro_refs":[],"relations":[{"span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/zeroable.rs","byte_start":24787,"byte_end":24792,"line_start":15,"line_end":15,"column_start":28,"column_end":33},"kind":"SuperTrait","from":{"krate":1,"index":3024},"to":{"krate":0,"index":72}},{"span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/zeroable.rs","byte_start":25712,"byte_end":25720,"line_start":43,"line_end":43,"column_start":39,"column_end":47},"kind":{"Impl":{"id":16}},"from":{"krate":1,"index":26548},"to":{"krate":0,"index":72}},{"span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/zeroable.rs","byte_start":25753,"byte_end":25759,"line_start":45,"line_end":45,"column_start":26,"column_end":32},"kind":{"Impl":{"id":17}},"from":{"krate":1,"index":45092},"to":{"krate":0,"index":72}},{"span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/zeroable.rs","byte_start":25799,"byte_end":25805,"line_start":46,"line_end":46,"column_start":26,"column_end":32},"kind":{"Impl":{"id":18}},"from":{"krate":1,"index":45092},"to":{"krate":0,"index":72}},{"span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/zeroable.rs","byte_start":25846,"byte_end":25852,"line_start":47,"line_end":47,"column_start":26,"column_end":32},"kind":{"Impl":{"id":19}},"from":{"krate":1,"index":45092},"to":{"krate":0,"index":72}},{"span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/zeroable.rs","byte_start":25893,"byte_end":25899,"line_start":48,"line_end":48,"column_start":26,"column_end":32},"kind":{"Impl":{"id":20}},"from":{"krate":1,"index":45092},"to":{"krate":0,"index":72}},{"span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/zeroable.rs","byte_start":25940,"byte_end":25946,"line_start":49,"line_end":49,"column_start":26,"column_end":32},"kind":{"Impl":{"id":21}},"from":{"krate":1,"index":45092},"to":{"krate":0,"index":72}},{"span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/zeroable.rs","byte_start":25988,"byte_end":25994,"line_start":50,"line_end":50,"column_start":26,"column_end":32},"kind":{"Impl":{"id":22}},"from":{"krate":1,"index":45092},"to":{"krate":0,"index":72}},{"span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/zeroable.rs","byte_start":26037,"byte_end":26043,"line_start":51,"line_end":51,"column_start":26,"column_end":32},"kind":{"Impl":{"id":23}},"from":{"krate":1,"index":45092},"to":{"krate":0,"index":72}},{"span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/zeroable.rs","byte_start":26083,"byte_end":26089,"line_start":52,"line_end":52,"column_start":26,"column_end":32},"kind":{"Impl":{"id":24}},"from":{"krate":1,"index":45092},"to":{"krate":0,"index":72}},{"span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/zeroable.rs","byte_start":26130,"byte_end":26136,"line_start":53,"line_end":53,"column_start":26,"column_end":32},"kind":{"Impl":{"id":25}},"from":{"krate":1,"index":45092},"to":{"krate":0,"index":72}},{"span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/zeroable.rs","byte_start":26177,"byte_end":26183,"line_start":54,"line_end":54,"column_start":26,"column_end":32},"kind":{"Impl":{"id":26}},"from":{"krate":1,"index":45092},"to":{"krate":0,"index":72}},{"span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/zeroable.rs","byte_start":26224,"byte_end":26230,"line_start":55,"line_end":55,"column_start":26,"column_end":32},"kind":{"Impl":{"id":27}},"from":{"krate":1,"index":45092},"to":{"krate":0,"index":72}},{"span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/zeroable.rs","byte_start":26272,"byte_end":26278,"line_start":56,"line_end":56,"column_start":26,"column_end":32},"kind":{"Impl":{"id":28}},"from":{"krate":1,"index":45092},"to":{"krate":0,"index":72}},{"span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/zeroable.rs","byte_start":26403,"byte_end":26409,"line_start":60,"line_end":60,"column_start":29,"column_end":35},"kind":{"Impl":{"id":29}},"from":{"krate":1,"index":45092},"to":{"krate":0,"index":72}},{"span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/zeroable.rs","byte_start":26463,"byte_end":26474,"line_start":61,"line_end":61,"column_start":39,"column_end":50},"kind":{"Impl":{"id":30}},"from":{"krate":1,"index":3037},"to":{"krate":0,"index":72}},{"span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/zeroable.rs","byte_start":26506,"byte_end":26519,"line_start":62,"line_end":62,"column_start":26,"column_end":39},"kind":{"Impl":{"id":31}},"from":{"krate":1,"index":36597},"to":{"krate":0,"index":72}},{"span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/zeroable.rs","byte_start":26561,"byte_end":26573,"line_start":63,"line_end":63,"column_start":39,"column_end":51},"kind":{"Impl":{"id":32}},"from":{"krate":1,"index":30411},"to":{"krate":0,"index":72}},{"span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/zeroable.rs","byte_start":40223,"byte_end":40230,"line_start":349,"line_end":349,"column_start":34,"column_end":41},"kind":{"Impl":{"id":33}},"from":{"krate":1,"index":50872},"to":{"krate":0,"index":72}},{"span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/zeroable.rs","byte_start":40298,"byte_end":40304,"line_start":351,"line_end":351,"column_start":34,"column_end":40},"kind":{"Impl":{"id":34}},"from":{"krate":1,"index":50881},"to":{"krate":0,"index":72}},{"span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/zeroable.rs","byte_start":40372,"byte_end":40379,"line_start":353,"line_end":353,"column_start":34,"column_end":41},"kind":{"Impl":{"id":35}},"from":{"krate":1,"index":50892},"to":{"krate":0,"index":72}},{"span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/zeroable.rs","byte_start":40447,"byte_end":40454,"line_start":355,"line_end":355,"column_start":34,"column_end":41},"kind":{"Impl":{"id":36}},"from":{"krate":1,"index":50901},"to":{"krate":0,"index":72}},{"span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/zeroable.rs","byte_start":40522,"byte_end":40528,"line_start":357,"line_end":357,"column_start":34,"column_end":40},"kind":{"Impl":{"id":37}},"from":{"krate":1,"index":50912},"to":{"krate":0,"index":72}},{"span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/zeroable.rs","byte_start":40596,"byte_end":40603,"line_start":359,"line_end":359,"column_start":34,"column_end":41},"kind":{"Impl":{"id":38}},"from":{"krate":1,"index":50927},"to":{"krate":0,"index":72}},{"span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/pod.rs","byte_start":42512,"byte_end":42520,"line_start":29,"line_end":29,"column_start":23,"column_end":31},"kind":"SuperTrait","from":{"krate":0,"index":72},"to":{"krate":0,"index":169}},{"span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/pod.rs","byte_start":42523,"byte_end":42527,"line_start":29,"line_end":29,"column_start":34,"column_end":38},"kind":"SuperTrait","from":{"krate":1,"index":3029},"to":{"krate":0,"index":169}},{"span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/pod.rs","byte_start":42978,"byte_end":42986,"line_start":46,"line_end":46,"column_start":29,"column_end":37},"kind":{"Impl":{"id":53}},"from":{"krate":1,"index":26548},"to":{"krate":0,"index":169}},{"span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/pod.rs","byte_start":43014,"byte_end":43020,"line_start":48,"line_end":48,"column_start":21,"column_end":27},"kind":{"Impl":{"id":54}},"from":{"krate":1,"index":45092},"to":{"krate":0,"index":169}},{"span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/pod.rs","byte_start":43055,"byte_end":43061,"line_start":49,"line_end":49,"column_start":21,"column_end":27},"kind":{"Impl":{"id":55}},"from":{"krate":1,"index":45092},"to":{"krate":0,"index":169}},{"span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/pod.rs","byte_start":43097,"byte_end":43103,"line_start":50,"line_end":50,"column_start":21,"column_end":27},"kind":{"Impl":{"id":56}},"from":{"krate":1,"index":45092},"to":{"krate":0,"index":169}},{"span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/pod.rs","byte_start":43139,"byte_end":43145,"line_start":51,"line_end":51,"column_start":21,"column_end":27},"kind":{"Impl":{"id":57}},"from":{"krate":1,"index":45092},"to":{"krate":0,"index":169}},{"span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/pod.rs","byte_start":43181,"byte_end":43187,"line_start":52,"line_end":52,"column_start":21,"column_end":27},"kind":{"Impl":{"id":58}},"from":{"krate":1,"index":45092},"to":{"krate":0,"index":169}},{"span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/pod.rs","byte_start":43224,"byte_end":43230,"line_start":53,"line_end":53,"column_start":21,"column_end":27},"kind":{"Impl":{"id":59}},"from":{"krate":1,"index":45092},"to":{"krate":0,"index":169}},{"span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/pod.rs","byte_start":43268,"byte_end":43274,"line_start":54,"line_end":54,"column_start":21,"column_end":27},"kind":{"Impl":{"id":60}},"from":{"krate":1,"index":45092},"to":{"krate":0,"index":169}},{"span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/pod.rs","byte_start":43309,"byte_end":43315,"line_start":55,"line_end":55,"column_start":21,"column_end":27},"kind":{"Impl":{"id":61}},"from":{"krate":1,"index":45092},"to":{"krate":0,"index":169}},{"span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/pod.rs","byte_start":43351,"byte_end":43357,"line_start":56,"line_end":56,"column_start":21,"column_end":27},"kind":{"Impl":{"id":62}},"from":{"krate":1,"index":45092},"to":{"krate":0,"index":169}},{"span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/pod.rs","byte_start":43393,"byte_end":43399,"line_start":57,"line_end":57,"column_start":21,"column_end":27},"kind":{"Impl":{"id":63}},"from":{"krate":1,"index":45092},"to":{"krate":0,"index":169}},{"span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/pod.rs","byte_start":43435,"byte_end":43441,"line_start":58,"line_end":58,"column_start":21,"column_end":27},"kind":{"Impl":{"id":64}},"from":{"krate":1,"index":45092},"to":{"krate":0,"index":169}},{"span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/pod.rs","byte_start":43478,"byte_end":43484,"line_start":59,"line_end":59,"column_start":21,"column_end":27},"kind":{"Impl":{"id":65}},"from":{"krate":1,"index":45092},"to":{"krate":0,"index":169}},{"span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/pod.rs","byte_start":43795,"byte_end":43806,"line_start":68,"line_end":68,"column_start":29,"column_end":40},"kind":{"Impl":{"id":66}},"from":{"krate":1,"index":3037},"to":{"krate":0,"index":169}},{"span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/pod.rs","byte_start":43833,"byte_end":43846,"line_start":69,"line_end":69,"column_start":21,"column_end":34},"kind":{"Impl":{"id":67}},"from":{"krate":1,"index":36597},"to":{"krate":0,"index":169}},{"span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/pod.rs","byte_start":43878,"byte_end":43890,"line_start":70,"line_end":70,"column_start":29,"column_end":41},"kind":{"Impl":{"id":68}},"from":{"krate":1,"index":30411},"to":{"krate":0,"index":169}},{"span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/pod.rs","byte_start":55997,"byte_end":56004,"line_start":310,"line_end":310,"column_start":29,"column_end":36},"kind":{"Impl":{"id":69}},"from":{"krate":1,"index":50872},"to":{"krate":0,"index":169}},{"span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/pod.rs","byte_start":56067,"byte_end":56073,"line_start":312,"line_end":312,"column_start":29,"column_end":35},"kind":{"Impl":{"id":70}},"from":{"krate":1,"index":50881},"to":{"krate":0,"index":169}},{"span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/pod.rs","byte_start":56136,"byte_end":56143,"line_start":314,"line_end":314,"column_start":29,"column_end":36},"kind":{"Impl":{"id":71}},"from":{"krate":1,"index":50892},"to":{"krate":0,"index":169}},{"span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/pod.rs","byte_start":56206,"byte_end":56213,"line_start":316,"line_end":316,"column_start":29,"column_end":36},"kind":{"Impl":{"id":72}},"from":{"krate":1,"index":50901},"to":{"krate":0,"index":169}},{"span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/pod.rs","byte_start":56276,"byte_end":56282,"line_start":318,"line_end":318,"column_start":29,"column_end":35},"kind":{"Impl":{"id":73}},"from":{"krate":1,"index":50912},"to":{"krate":0,"index":169}},{"span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/pod.rs","byte_start":56345,"byte_end":56352,"line_start":320,"line_end":320,"column_start":29,"column_end":36},"kind":{"Impl":{"id":74}},"from":{"krate":1,"index":50927},"to":{"krate":0,"index":169}},{"span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/contiguous.rs","byte_start":59891,"byte_end":59895,"line_start":78,"line_end":78,"column_start":30,"column_end":34},"kind":"SuperTrait","from":{"krate":1,"index":3029},"to":{"krate":0,"index":213}},{"span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/transparent.rs","byte_start":78767,"byte_end":78775,"line_start":249,"line_end":249,"column_start":53,"column_end":61},"kind":{"Impl":{"id":94}},"from":{"krate":1,"index":26548},"to":{"krate":0,"index":226}},{"span":{"file_name":"/home/junior/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.8.0/src/lib.rs","byte_start":8727,"byte_end":8739,"line_start":273,"line_end":273,"column_start":29,"column_end":41},"kind":{"Impl":{"id":95}},"from":{"krate":0,"index":626},"to":{"krate":1,"index":9560}}]}